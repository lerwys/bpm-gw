-------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Position Calculation Core registers
-------------------------------------------------------------------------------
-- File           : wb_pos_calc_regs.vhdl
-- Author         : auto-generated by wbgen2 from wb_pos_calc_regs.wb
-- Created        : Fri Aug 21 09:53:04 2020
-- Standard       : VHDL'87
-------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wb_pos_calc_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

entity wb_pos_calc_regs is
  port (
    rst_n_i              : in    std_logic;
    clk_sys_i            : in    std_logic;
    wb_adr_i             : in    std_logic_vector(6 downto 0);
    wb_dat_i             : in    std_logic_vector(31 downto 0);
    wb_dat_o             : out   std_logic_vector(31 downto 0);
    wb_cyc_i             : in    std_logic;
    wb_sel_i             : in    std_logic_vector(3 downto 0);
    wb_stb_i             : in    std_logic;
    wb_we_i              : in    std_logic;
    wb_ack_o             : out   std_logic;
    wb_stall_o           : out   std_logic;
    fs_clk2x_i           : in    std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'Config divisor threshold TBT' in reg: 'Config divisor threshold TBT register'
    pos_calc_ds_tbt_thres_val_o : out   std_logic_vector(25 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'Config divisor threshold TBT register'
    pos_calc_ds_tbt_thres_reserved_i : in    std_logic_vector(5 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'Config divisor threshold FOFB' in reg: 'Config divisor threshold FOFB register'
    pos_calc_ds_fofb_thres_val_o : out   std_logic_vector(25 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'Config divisor threshold FOFB register'
    pos_calc_ds_fofb_thres_reserved_i : in    std_logic_vector(5 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'Config Divisor Threshold Monit.' in reg: 'Config divisor threshold Monit. register'
    pos_calc_ds_monit_thres_val_o : out   std_logic_vector(25 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'Config divisor threshold Monit. register'
    pos_calc_ds_monit_thres_reserved_i : in    std_logic_vector(5 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'BPM sensitivity (X axis) parameter register' in reg: 'BPM sensitivity (X axis) parameter register'
    pos_calc_kx_val_o    : out   std_logic_vector(24 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'BPM sensitivity (X axis) parameter register'
    pos_calc_kx_reserved_i : in    std_logic_vector(6 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'BPM sensitivity (Y axis) parameter register' in reg: 'BPM sensitivity (Y axis) parameter register'
    pos_calc_ky_val_o    : out   std_logic_vector(24 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'BPM sensitivity (Y axis) parameter register'
    pos_calc_ky_reserved_i : in    std_logic_vector(6 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'BPM sensitivity (Sum) parameter register' in reg: 'BPM sensitivity (Sum) parameter register'
    pos_calc_ksum_val_o  : out   std_logic_vector(24 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'BPM sensitivity (Sum) parameter register'
    pos_calc_ksum_reserved_i : in    std_logic_vector(6 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'TBT incorrect counter for channels 0/1 (multiplexed)' in reg: 'DSP TBT incorrect TDM counter'
    pos_calc_dsp_ctnr_tbt_ch01_i : in    std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'TBT incorrect counter for channels 2/3 (multiplexed)' in reg: 'DSP TBT incorrect TDM counter'
    pos_calc_dsp_ctnr_tbt_ch23_i : in    std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'FOFB incorrect counter for channels 0/1 (multiplexed)' in reg: 'DSP FOFB incorrect TDM counter'
    pos_calc_dsp_ctnr_fofb_ch01_i : in    std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'FOFB incorrect counter for channels 2/3 (multiplexed)' in reg: 'DSP FOFB incorrect TDM counter'
    pos_calc_dsp_ctnr_fofb_ch23_i : in    std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'Monit. CIC incorrect counter for channels 0/1/2/3 (multiplexed)' in reg: 'DSP Monit. incorrect TDM counter part 1'
    pos_calc_dsp_ctnr1_monit_cic_i : in    std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'Monit. CFIR incorrect counter for channels 0/1/2/3 (multiplexed)' in reg: 'DSP Monit. incorrect TDM counter part 1'
    pos_calc_dsp_ctnr1_monit_cfir_i : in    std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'Monit. PFIR incorrect counter for channels 0/1/2/3 (multiplexed)' in reg: 'DSP Monit. incorrect TDM counter part 2'
    pos_calc_dsp_ctnr2_monit_pfir_i : in    std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'Monit. 0.1 Hz incorrect counter for channels 0/1/2/3 (multiplexed)' in reg: 'DSP Monit. incorrect TDM counter part 2'
    pos_calc_dsp_ctnr2_monit_fir_01_i : in    std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'Clear TBT error counters' in reg: 'DSP error clearing'
    pos_calc_dsp_err_clr_tbt_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'Clear FOFB error counters' in reg: 'DSP error clearing'
    pos_calc_dsp_err_clr_fofb_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'Clear Monit. CIC and CFIR error counters' in reg: 'DSP error clearing'
    pos_calc_dsp_err_clr_monit_part1_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'Clear Monit. PFIR and Monit. 0.1 error counters' in reg: 'DSP error clearing'
    pos_calc_dsp_err_clr_monit_part2_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'Valid signal for channel 0 DDS' in reg: 'DDS general config registers for all channels'
    pos_calc_dds_cfg_valid_ch0_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) BIT field: 'Test data counter for all channels' in reg: 'DDS general config registers for all channels'
    pos_calc_dds_cfg_test_data_o : out   std_logic;
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS general config registers for all channels'
    pos_calc_dds_cfg_reserved_ch0_i : in    std_logic_vector(5 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'Valid signal for channel 1 DDS' in reg: 'DDS general config registers for all channels'
    pos_calc_dds_cfg_valid_ch1_o : out   std_logic;
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS general config registers for all channels'
    pos_calc_dds_cfg_reserved_ch1_i : in    std_logic_vector(6 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'Valid signal for channel 2 DDS' in reg: 'DDS general config registers for all channels'
    pos_calc_dds_cfg_valid_ch2_o : out   std_logic;
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS general config registers for all channels'
    pos_calc_dds_cfg_reserved_ch2_i : in    std_logic_vector(6 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'Valid signal for channel 3 DDS' in reg: 'DDS general config registers for all channels'
    pos_calc_dds_cfg_valid_ch3_o : out   std_logic;
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS general config registers for all channels'
    pos_calc_dds_cfg_reserved_ch3_i : in    std_logic_vector(6 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'DDS phase increment parameter register for channel 0' in reg: 'DDS phase increment parameter register for channel 0'
    pos_calc_dds_pinc_ch0_val_o : out   std_logic_vector(29 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS phase increment parameter register for channel 0'
    pos_calc_dds_pinc_ch0_reserved_i : in    std_logic_vector(1 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'DDS phase increment parameter register for channel 1' in reg: 'DDS phase increment parameter register for channel 1'
    pos_calc_dds_pinc_ch1_val_o : out   std_logic_vector(29 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS phase increment parameter register for channel 1'
    pos_calc_dds_pinc_ch1_reserved_i : in    std_logic_vector(1 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'DDS phase increment parameter register for channel 2' in reg: 'DDS phase increment parameter register for channel 2'
    pos_calc_dds_pinc_ch2_val_o : out   std_logic_vector(29 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS phase increment parameter register for channel 2'
    pos_calc_dds_pinc_ch2_reserved_i : in    std_logic_vector(1 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'DDS phase increment parameter register for channel 3' in reg: 'DDS phase increment parameter register for channel 3'
    pos_calc_dds_pinc_ch3_val_o : out   std_logic_vector(29 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS phase increment parameter register for channel 3'
    pos_calc_dds_pinc_ch3_reserved_i : in    std_logic_vector(1 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'DDS phase offset parameter register for channel 0' in reg: 'DDS phase offset parameter register for channel 0'
    pos_calc_dds_poff_ch0_val_o : out   std_logic_vector(29 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS phase offset parameter register for channel 0'
    pos_calc_dds_poff_ch0_reserved_i : in    std_logic_vector(1 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'DDS phase offset parameter register for channel 1' in reg: 'DDS phase offset parameter register for channel 1'
    pos_calc_dds_poff_ch1_val_o : out   std_logic_vector(29 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS phase offset parameter register for channel 1'
    pos_calc_dds_poff_ch1_reserved_i : in    std_logic_vector(1 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'DDS phase offset parameter register for channel 2' in reg: 'DDS phase offset parameter register for channel 2'
    pos_calc_dds_poff_ch2_val_o : out   std_logic_vector(29 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS phase offset parameter register for channel 2'
    pos_calc_dds_poff_ch2_reserved_i : in    std_logic_vector(1 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'DDS phase offset parameter register for channel 3' in reg: 'DDS phase offset parameter register for channel 3'
    pos_calc_dds_poff_ch3_val_o : out   std_logic_vector(29 downto 0);
    -- Port for std_logic_vector field: 'Reserved' in reg: 'DDS phase offset parameter register for channel 3'
    pos_calc_dds_poff_ch3_reserved_i : in    std_logic_vector(1 downto 0);
    -- Port for std_logic_vector field: 'Monit. Amplitude Value for channel 0' in reg: 'Monit. Amplitude Value for channel 0'
    pos_calc_dsp_monit_amp_ch0_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. Amplitude Value for channel 1' in reg: 'Monit. Amplitude Value for channel 1'
    pos_calc_dsp_monit_amp_ch1_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. Amplitude Value for channel 2' in reg: 'Monit. Amplitude Value for channel 2'
    pos_calc_dsp_monit_amp_ch2_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. Amplitude Value for channel 3' in reg: 'Monit. Amplitude Value for channel 3'
    pos_calc_dsp_monit_amp_ch3_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. X Position Value' in reg: 'Monit. X Position Value'
    pos_calc_dsp_monit_pos_x_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. Y Position Value' in reg: 'Monit. Y Position Value'
    pos_calc_dsp_monit_pos_y_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. Q Position Value' in reg: 'Monit. Q Position Value'
    pos_calc_dsp_monit_pos_q_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. Sum Position Value' in reg: 'Monit. Sum Position Value'
    pos_calc_dsp_monit_pos_sum_i : in    std_logic_vector(31 downto 0);
    -- Ports for PASS_THROUGH field: 'Monit. Amp/Pos Update (ignore on read)' in reg: 'Monit. Amp/Pos update trigger'
    pos_calc_dsp_monit_updt_o : out   std_logic_vector(31 downto 0);
    pos_calc_dsp_monit_updt_wr_o : out   std_logic;
    -- Port for std_logic_vector field: 'Monit. 1 Amplitude Value for channel 0' in reg: 'Monit. 1 Amplitude Value for channel 0'
    pos_calc_dsp_monit1_amp_ch0_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. 1 Amplitude Value for channel 1' in reg: 'Monit. 1 Amplitude Value for channel 1'
    pos_calc_dsp_monit1_amp_ch1_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. 1 Amplitude Value for channel 2' in reg: 'Monit. 1 Amplitude Value for channel 2'
    pos_calc_dsp_monit1_amp_ch2_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. 1 Amplitude Value for channel 3' in reg: 'Monit. 1 Amplitude Value for channel 3'
    pos_calc_dsp_monit1_amp_ch3_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. 1 X Position Value' in reg: 'Monit. 1 X Position Value'
    pos_calc_dsp_monit1_pos_x_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. 1 Y Position Value' in reg: 'Monit. 1 Y Position Value'
    pos_calc_dsp_monit1_pos_y_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. 1 Q Position Value' in reg: 'Monit. 1 Q Position Value'
    pos_calc_dsp_monit1_pos_q_i : in    std_logic_vector(31 downto 0);
    -- Port for std_logic_vector field: 'Monit. 1 Sum Position Value' in reg: 'Monit. 1 Sum Position Value'
    pos_calc_dsp_monit1_pos_sum_i : in    std_logic_vector(31 downto 0);
    -- Ports for PASS_THROUGH field: 'Monit. 1 Amp/Pos Update (ignore on read)' in reg: 'Monit. 1 Amp/Pos update trigger'
    pos_calc_dsp_monit1_updt_o : out   std_logic_vector(31 downto 0);
    pos_calc_dsp_monit1_updt_wr_o : out   std_logic;
    -- FIFO write request
    pos_calc_ampfifo_monit_wr_req_i : in    std_logic;
    -- FIFO full flag
    pos_calc_ampfifo_monit_wr_full_o : out   std_logic;
    -- FIFO empty flag
    pos_calc_ampfifo_monit_wr_empty_o : out   std_logic;
    -- FIFO number of used words
    pos_calc_ampfifo_monit_wr_usedw_o : out   std_logic_vector(3 downto 0);
    pos_calc_ampfifo_monit_amp_ch0_i : in    std_logic_vector(31 downto 0);
    pos_calc_ampfifo_monit_amp_ch1_i : in    std_logic_vector(31 downto 0);
    pos_calc_ampfifo_monit_amp_ch2_i : in    std_logic_vector(31 downto 0);
    pos_calc_ampfifo_monit_amp_ch3_i : in    std_logic_vector(31 downto 0);
    -- FIFO write request
    pos_calc_posfifo_monit_wr_req_i : in    std_logic;
    -- FIFO full flag
    pos_calc_posfifo_monit_wr_full_o : out   std_logic;
    -- FIFO empty flag
    pos_calc_posfifo_monit_wr_empty_o : out   std_logic;
    -- FIFO number of used words
    pos_calc_posfifo_monit_wr_usedw_o : out   std_logic_vector(3 downto 0);
    pos_calc_posfifo_monit_pos_x_i : in    std_logic_vector(31 downto 0);
    pos_calc_posfifo_monit_pos_y_i : in    std_logic_vector(31 downto 0);
    pos_calc_posfifo_monit_pos_q_i : in    std_logic_vector(31 downto 0);
    pos_calc_posfifo_monit_pos_sum_i : in    std_logic_vector(31 downto 0);
    -- FIFO write request
    pos_calc_ampfifo_monit1_wr_req_i : in    std_logic;
    -- FIFO full flag
    pos_calc_ampfifo_monit1_wr_full_o : out   std_logic;
    -- FIFO empty flag
    pos_calc_ampfifo_monit1_wr_empty_o : out   std_logic;
    -- FIFO number of used words
    pos_calc_ampfifo_monit1_wr_usedw_o : out   std_logic_vector(3 downto 0);
    pos_calc_ampfifo_monit1_amp_ch0_i : in    std_logic_vector(31 downto 0);
    pos_calc_ampfifo_monit1_amp_ch1_i : in    std_logic_vector(31 downto 0);
    pos_calc_ampfifo_monit1_amp_ch2_i : in    std_logic_vector(31 downto 0);
    pos_calc_ampfifo_monit1_amp_ch3_i : in    std_logic_vector(31 downto 0);
    -- FIFO write request
    pos_calc_posfifo_monit1_wr_req_i : in    std_logic;
    -- FIFO full flag
    pos_calc_posfifo_monit1_wr_full_o : out   std_logic;
    -- FIFO empty flag
    pos_calc_posfifo_monit1_wr_empty_o : out   std_logic;
    -- FIFO number of used words
    pos_calc_posfifo_monit1_wr_usedw_o : out   std_logic_vector(3 downto 0);
    pos_calc_posfifo_monit1_pos_x_i : in    std_logic_vector(31 downto 0);
    pos_calc_posfifo_monit1_pos_y_i : in    std_logic_vector(31 downto 0);
    pos_calc_posfifo_monit1_pos_q_i : in    std_logic_vector(31 downto 0);
    pos_calc_posfifo_monit1_pos_sum_i : in    std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) BIT field: 'Tag Synchronization Enable' in reg: 'Switching Tag synchronization'
    pos_calc_sw_tag_en_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'Switching Desynchronization Counter Reset' in reg: 'Switching Tag synchronization'
    pos_calc_sw_tag_desync_cnt_rst_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'Switching Desynchronization Counter' in reg: 'Switching Tag synchronization'
    pos_calc_sw_tag_desync_cnt_i : in    std_logic_vector(13 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) BIT field: 'Switching Data Mask Enable' in reg: 'Switching Data Mask'
    pos_calc_sw_data_mask_en_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'Switching Data Mask Samples' in reg: 'Switching Data Mask'
    pos_calc_sw_data_mask_samples_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) BIT field: 'TbT Synchronizing Trigger Enable' in reg: 'TbT Synchronizing Trigger'
    pos_calc_tbt_tag_en_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'TbT Synchronizing Trigger Delay' in reg: 'TbT Synchronizing Trigger'
    pos_calc_tbt_tag_dly_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'TbT Desynchronization Counter Reset' in reg: 'TbT Synchronizing Trigger'
    pos_calc_tbt_tag_desync_cnt_rst_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'TbT Desynchronization Counter' in reg: 'TbT Synchronizing Trigger'
    pos_calc_tbt_tag_desync_cnt_i : in    std_logic_vector(13 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) BIT field: 'TbT Masking Enable' in reg: 'TbT Masking Control'
    pos_calc_tbt_data_mask_ctl_en_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'TbT Beginning Data Masking Samples' in reg: 'TbT Data Masking Samples'
    pos_calc_tbt_data_mask_samples_beg_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'TbT Beginning Data Masking Samples' in reg: 'TbT Data Masking Samples'
    pos_calc_tbt_data_mask_samples_end_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) BIT field: 'MONIT1 Synchronizing Trigger Enable' in reg: 'MONIT1 Synchronizing Trigger'
    pos_calc_monit1_tag_en_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'MONIT1 Synchronizing Trigger Delay' in reg: 'MONIT1 Synchronizing Trigger'
    pos_calc_monit1_tag_dly_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'MONIT1 Desynchronization Counter Reset' in reg: 'MONIT1 Synchronizing Trigger'
    pos_calc_monit1_tag_desync_cnt_rst_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'MONIT1 Desynchronization Counter' in reg: 'MONIT1 Synchronizing Trigger'
    pos_calc_monit1_tag_desync_cnt_i : in    std_logic_vector(13 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) BIT field: 'MONIT1 Masking Enable' in reg: 'MONIT1 Masking Control'
    pos_calc_monit1_data_mask_ctl_en_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'MONIT1 Beginning Data Masking Samples' in reg: 'MONIT1 Data Masking Samples'
    pos_calc_monit1_data_mask_samples_beg_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'MONIT1 Beginning Data Masking Samples' in reg: 'MONIT1 Data Masking Samples'
    pos_calc_monit1_data_mask_samples_end_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) BIT field: 'MONIT Synchronizing Trigger Enable' in reg: 'MONIT Synchronizing Trigger'
    pos_calc_monit_tag_en_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'MONIT Synchronizing Trigger Delay' in reg: 'MONIT Synchronizing Trigger'
    pos_calc_monit_tag_dly_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) MONOSTABLE field: 'MONIT Desynchronization Counter Reset' in reg: 'MONIT Synchronizing Trigger'
    pos_calc_monit_tag_desync_cnt_rst_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'MONIT Desynchronization Counter' in reg: 'MONIT Synchronizing Trigger'
    pos_calc_monit_tag_desync_cnt_i : in    std_logic_vector(13 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) BIT field: 'MONIT Masking Enable' in reg: 'MONIT Masking Control'
    pos_calc_monit_data_mask_ctl_en_o : out   std_logic;
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'MONIT Beginning Data Masking Samples' in reg: 'MONIT Data Masking Samples'
    pos_calc_monit_data_mask_samples_beg_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'MONIT Beginning Data Masking Samples' in reg: 'MONIT Data Masking Samples'
    pos_calc_monit_data_mask_samples_end_o : out   std_logic_vector(15 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'BPM X position offset' in reg: 'BPM X position offset parameter register'
    pos_calc_offset_x_o  : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: fs_clk2x_i) std_logic_vector field: 'BPM Y position offset' in reg: 'BPM Y position offset parameter register'
    pos_calc_offset_y_o  : out   std_logic_vector(31 downto 0)
  );
end wb_pos_calc_regs;

architecture syn of wb_pos_calc_regs is

  signal pos_calc_ds_tbt_thres_val_int  : std_logic_vector(25 downto 0);
  signal pos_calc_ds_tbt_thres_val_swb  : std_logic;
  signal pos_calc_ds_tbt_thres_val_swb_delay : std_logic;
  signal pos_calc_ds_tbt_thres_val_swb_s0 : std_logic;
  signal pos_calc_ds_tbt_thres_val_swb_s1 : std_logic;
  signal pos_calc_ds_tbt_thres_val_swb_s2 : std_logic;
  signal pos_calc_ds_fofb_thres_val_int : std_logic_vector(25 downto 0);
  signal pos_calc_ds_fofb_thres_val_swb : std_logic;
  signal pos_calc_ds_fofb_thres_val_swb_delay : std_logic;
  signal pos_calc_ds_fofb_thres_val_swb_s0 : std_logic;
  signal pos_calc_ds_fofb_thres_val_swb_s1 : std_logic;
  signal pos_calc_ds_fofb_thres_val_swb_s2 : std_logic;
  signal pos_calc_ds_monit_thres_val_int : std_logic_vector(25 downto 0);
  signal pos_calc_ds_monit_thres_val_swb : std_logic;
  signal pos_calc_ds_monit_thres_val_swb_delay : std_logic;
  signal pos_calc_ds_monit_thres_val_swb_s0 : std_logic;
  signal pos_calc_ds_monit_thres_val_swb_s1 : std_logic;
  signal pos_calc_ds_monit_thres_val_swb_s2 : std_logic;
  signal pos_calc_kx_val_int            : std_logic_vector(24 downto 0);
  signal pos_calc_kx_val_swb            : std_logic;
  signal pos_calc_kx_val_swb_delay      : std_logic;
  signal pos_calc_kx_val_swb_s0         : std_logic;
  signal pos_calc_kx_val_swb_s1         : std_logic;
  signal pos_calc_kx_val_swb_s2         : std_logic;
  signal pos_calc_ky_val_int            : std_logic_vector(24 downto 0);
  signal pos_calc_ky_val_swb            : std_logic;
  signal pos_calc_ky_val_swb_delay      : std_logic;
  signal pos_calc_ky_val_swb_s0         : std_logic;
  signal pos_calc_ky_val_swb_s1         : std_logic;
  signal pos_calc_ky_val_swb_s2         : std_logic;
  signal pos_calc_ksum_val_int          : std_logic_vector(24 downto 0);
  signal pos_calc_ksum_val_swb          : std_logic;
  signal pos_calc_ksum_val_swb_delay    : std_logic;
  signal pos_calc_ksum_val_swb_s0       : std_logic;
  signal pos_calc_ksum_val_swb_s1       : std_logic;
  signal pos_calc_ksum_val_swb_s2       : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch01_int : std_logic_vector(15 downto 0);
  signal pos_calc_dsp_ctnr_tbt_ch01_lwb : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch01_lwb_delay : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch01_lwb_s0 : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch01_lwb_s1 : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch01_lwb_s2 : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch23_int : std_logic_vector(15 downto 0);
  signal pos_calc_dsp_ctnr_tbt_ch23_lwb : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch23_lwb_delay : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch23_lwb_s0 : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch23_lwb_s1 : std_logic;
  signal pos_calc_dsp_ctnr_tbt_ch23_lwb_s2 : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch01_int : std_logic_vector(15 downto 0);
  signal pos_calc_dsp_ctnr_fofb_ch01_lwb : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch01_lwb_delay : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch01_lwb_s0 : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch01_lwb_s1 : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch01_lwb_s2 : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch23_int : std_logic_vector(15 downto 0);
  signal pos_calc_dsp_ctnr_fofb_ch23_lwb : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch23_lwb_delay : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch23_lwb_s0 : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch23_lwb_s1 : std_logic;
  signal pos_calc_dsp_ctnr_fofb_ch23_lwb_s2 : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cic_int : std_logic_vector(15 downto 0);
  signal pos_calc_dsp_ctnr1_monit_cic_lwb : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cic_lwb_delay : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cic_lwb_s0 : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cic_lwb_s1 : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cic_lwb_s2 : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cfir_int : std_logic_vector(15 downto 0);
  signal pos_calc_dsp_ctnr1_monit_cfir_lwb : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cfir_lwb_delay : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cfir_lwb_s0 : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cfir_lwb_s1 : std_logic;
  signal pos_calc_dsp_ctnr1_monit_cfir_lwb_s2 : std_logic;
  signal pos_calc_dsp_ctnr2_monit_pfir_int : std_logic_vector(15 downto 0);
  signal pos_calc_dsp_ctnr2_monit_pfir_lwb : std_logic;
  signal pos_calc_dsp_ctnr2_monit_pfir_lwb_delay : std_logic;
  signal pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress : std_logic;
  signal pos_calc_dsp_ctnr2_monit_pfir_lwb_s0 : std_logic;
  signal pos_calc_dsp_ctnr2_monit_pfir_lwb_s1 : std_logic;
  signal pos_calc_dsp_ctnr2_monit_pfir_lwb_s2 : std_logic;
  signal pos_calc_dsp_ctnr2_monit_fir_01_int : std_logic_vector(15 downto 0);
  signal pos_calc_dsp_ctnr2_monit_fir_01_lwb : std_logic;
  signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay : std_logic;
  signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress : std_logic;
  signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0 : std_logic;
  signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1 : std_logic;
  signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2 : std_logic;
  signal pos_calc_dsp_err_clr_tbt_int   : std_logic;
  signal pos_calc_dsp_err_clr_tbt_int_delay : std_logic;
  signal pos_calc_dsp_err_clr_tbt_sync0 : std_logic;
  signal pos_calc_dsp_err_clr_tbt_sync1 : std_logic;
  signal pos_calc_dsp_err_clr_tbt_sync2 : std_logic;
  signal pos_calc_dsp_err_clr_fofb_int  : std_logic;
  signal pos_calc_dsp_err_clr_fofb_int_delay : std_logic;
  signal pos_calc_dsp_err_clr_fofb_sync0 : std_logic;
  signal pos_calc_dsp_err_clr_fofb_sync1 : std_logic;
  signal pos_calc_dsp_err_clr_fofb_sync2 : std_logic;
  signal pos_calc_dsp_err_clr_monit_part1_int : std_logic;
  signal pos_calc_dsp_err_clr_monit_part1_int_delay : std_logic;
  signal pos_calc_dsp_err_clr_monit_part1_sync0 : std_logic;
  signal pos_calc_dsp_err_clr_monit_part1_sync1 : std_logic;
  signal pos_calc_dsp_err_clr_monit_part1_sync2 : std_logic;
  signal pos_calc_dsp_err_clr_monit_part2_int : std_logic;
  signal pos_calc_dsp_err_clr_monit_part2_int_delay : std_logic;
  signal pos_calc_dsp_err_clr_monit_part2_sync0 : std_logic;
  signal pos_calc_dsp_err_clr_monit_part2_sync1 : std_logic;
  signal pos_calc_dsp_err_clr_monit_part2_sync2 : std_logic;
  signal pos_calc_dds_cfg_valid_ch0_int : std_logic;
  signal pos_calc_dds_cfg_valid_ch0_int_delay : std_logic;
  signal pos_calc_dds_cfg_valid_ch0_sync0 : std_logic;
  signal pos_calc_dds_cfg_valid_ch0_sync1 : std_logic;
  signal pos_calc_dds_cfg_valid_ch0_sync2 : std_logic;
  signal pos_calc_dds_cfg_test_data_int : std_logic;
  signal pos_calc_dds_cfg_test_data_sync0 : std_logic;
  signal pos_calc_dds_cfg_test_data_sync1 : std_logic;
  signal pos_calc_dds_cfg_valid_ch1_int : std_logic;
  signal pos_calc_dds_cfg_valid_ch1_int_delay : std_logic;
  signal pos_calc_dds_cfg_valid_ch1_sync0 : std_logic;
  signal pos_calc_dds_cfg_valid_ch1_sync1 : std_logic;
  signal pos_calc_dds_cfg_valid_ch1_sync2 : std_logic;
  signal pos_calc_dds_cfg_valid_ch2_int : std_logic;
  signal pos_calc_dds_cfg_valid_ch2_int_delay : std_logic;
  signal pos_calc_dds_cfg_valid_ch2_sync0 : std_logic;
  signal pos_calc_dds_cfg_valid_ch2_sync1 : std_logic;
  signal pos_calc_dds_cfg_valid_ch2_sync2 : std_logic;
  signal pos_calc_dds_cfg_valid_ch3_int : std_logic;
  signal pos_calc_dds_cfg_valid_ch3_int_delay : std_logic;
  signal pos_calc_dds_cfg_valid_ch3_sync0 : std_logic;
  signal pos_calc_dds_cfg_valid_ch3_sync1 : std_logic;
  signal pos_calc_dds_cfg_valid_ch3_sync2 : std_logic;
  signal pos_calc_dds_pinc_ch0_val_int  : std_logic_vector(29 downto 0);
  signal pos_calc_dds_pinc_ch0_val_swb  : std_logic;
  signal pos_calc_dds_pinc_ch0_val_swb_delay : std_logic;
  signal pos_calc_dds_pinc_ch0_val_swb_s0 : std_logic;
  signal pos_calc_dds_pinc_ch0_val_swb_s1 : std_logic;
  signal pos_calc_dds_pinc_ch0_val_swb_s2 : std_logic;
  signal pos_calc_dds_pinc_ch1_val_int  : std_logic_vector(29 downto 0);
  signal pos_calc_dds_pinc_ch1_val_swb  : std_logic;
  signal pos_calc_dds_pinc_ch1_val_swb_delay : std_logic;
  signal pos_calc_dds_pinc_ch1_val_swb_s0 : std_logic;
  signal pos_calc_dds_pinc_ch1_val_swb_s1 : std_logic;
  signal pos_calc_dds_pinc_ch1_val_swb_s2 : std_logic;
  signal pos_calc_dds_pinc_ch2_val_int  : std_logic_vector(29 downto 0);
  signal pos_calc_dds_pinc_ch2_val_swb  : std_logic;
  signal pos_calc_dds_pinc_ch2_val_swb_delay : std_logic;
  signal pos_calc_dds_pinc_ch2_val_swb_s0 : std_logic;
  signal pos_calc_dds_pinc_ch2_val_swb_s1 : std_logic;
  signal pos_calc_dds_pinc_ch2_val_swb_s2 : std_logic;
  signal pos_calc_dds_pinc_ch3_val_int  : std_logic_vector(29 downto 0);
  signal pos_calc_dds_pinc_ch3_val_swb  : std_logic;
  signal pos_calc_dds_pinc_ch3_val_swb_delay : std_logic;
  signal pos_calc_dds_pinc_ch3_val_swb_s0 : std_logic;
  signal pos_calc_dds_pinc_ch3_val_swb_s1 : std_logic;
  signal pos_calc_dds_pinc_ch3_val_swb_s2 : std_logic;
  signal pos_calc_dds_poff_ch0_val_int  : std_logic_vector(29 downto 0);
  signal pos_calc_dds_poff_ch0_val_swb  : std_logic;
  signal pos_calc_dds_poff_ch0_val_swb_delay : std_logic;
  signal pos_calc_dds_poff_ch0_val_swb_s0 : std_logic;
  signal pos_calc_dds_poff_ch0_val_swb_s1 : std_logic;
  signal pos_calc_dds_poff_ch0_val_swb_s2 : std_logic;
  signal pos_calc_dds_poff_ch1_val_int  : std_logic_vector(29 downto 0);
  signal pos_calc_dds_poff_ch1_val_swb  : std_logic;
  signal pos_calc_dds_poff_ch1_val_swb_delay : std_logic;
  signal pos_calc_dds_poff_ch1_val_swb_s0 : std_logic;
  signal pos_calc_dds_poff_ch1_val_swb_s1 : std_logic;
  signal pos_calc_dds_poff_ch1_val_swb_s2 : std_logic;
  signal pos_calc_dds_poff_ch2_val_int  : std_logic_vector(29 downto 0);
  signal pos_calc_dds_poff_ch2_val_swb  : std_logic;
  signal pos_calc_dds_poff_ch2_val_swb_delay : std_logic;
  signal pos_calc_dds_poff_ch2_val_swb_s0 : std_logic;
  signal pos_calc_dds_poff_ch2_val_swb_s1 : std_logic;
  signal pos_calc_dds_poff_ch2_val_swb_s2 : std_logic;
  signal pos_calc_dds_poff_ch3_val_int  : std_logic_vector(29 downto 0);
  signal pos_calc_dds_poff_ch3_val_swb  : std_logic;
  signal pos_calc_dds_poff_ch3_val_swb_delay : std_logic;
  signal pos_calc_dds_poff_ch3_val_swb_s0 : std_logic;
  signal pos_calc_dds_poff_ch3_val_swb_s1 : std_logic;
  signal pos_calc_dds_poff_ch3_val_swb_s2 : std_logic;
  signal pos_calc_ampfifo_monit_rst_n   : std_logic;
  signal pos_calc_ampfifo_monit_in_int  : std_logic_vector(127 downto 0);
  signal pos_calc_ampfifo_monit_out_int : std_logic_vector(127 downto 0);
  signal pos_calc_ampfifo_monit_rdreq_int : std_logic;
  signal pos_calc_ampfifo_monit_rdreq_int_d0 : std_logic;
  signal pos_calc_posfifo_monit_rst_n   : std_logic;
  signal pos_calc_posfifo_monit_in_int  : std_logic_vector(127 downto 0);
  signal pos_calc_posfifo_monit_out_int : std_logic_vector(127 downto 0);
  signal pos_calc_posfifo_monit_rdreq_int : std_logic;
  signal pos_calc_posfifo_monit_rdreq_int_d0 : std_logic;
  signal pos_calc_ampfifo_monit1_rst_n  : std_logic;
  signal pos_calc_ampfifo_monit1_in_int : std_logic_vector(127 downto 0);
  signal pos_calc_ampfifo_monit1_out_int : std_logic_vector(127 downto 0);
  signal pos_calc_ampfifo_monit1_rdreq_int : std_logic;
  signal pos_calc_ampfifo_monit1_rdreq_int_d0 : std_logic;
  signal pos_calc_posfifo_monit1_rst_n  : std_logic;
  signal pos_calc_posfifo_monit1_in_int : std_logic_vector(127 downto 0);
  signal pos_calc_posfifo_monit1_out_int : std_logic_vector(127 downto 0);
  signal pos_calc_posfifo_monit1_rdreq_int : std_logic;
  signal pos_calc_posfifo_monit1_rdreq_int_d0 : std_logic;
  signal pos_calc_sw_tag_en_int         : std_logic;
  signal pos_calc_sw_tag_en_sync0       : std_logic;
  signal pos_calc_sw_tag_en_sync1       : std_logic;
  signal pos_calc_sw_tag_desync_cnt_rst_int : std_logic;
  signal pos_calc_sw_tag_desync_cnt_rst_int_delay : std_logic;
  signal pos_calc_sw_tag_desync_cnt_rst_sync0 : std_logic;
  signal pos_calc_sw_tag_desync_cnt_rst_sync1 : std_logic;
  signal pos_calc_sw_tag_desync_cnt_rst_sync2 : std_logic;
  signal pos_calc_sw_tag_desync_cnt_int : std_logic_vector(13 downto 0);
  signal pos_calc_sw_tag_desync_cnt_lwb : std_logic;
  signal pos_calc_sw_tag_desync_cnt_lwb_delay : std_logic;
  signal pos_calc_sw_tag_desync_cnt_lwb_in_progress : std_logic;
  signal pos_calc_sw_tag_desync_cnt_lwb_s0 : std_logic;
  signal pos_calc_sw_tag_desync_cnt_lwb_s1 : std_logic;
  signal pos_calc_sw_tag_desync_cnt_lwb_s2 : std_logic;
  signal pos_calc_sw_data_mask_en_int   : std_logic;
  signal pos_calc_sw_data_mask_en_sync0 : std_logic;
  signal pos_calc_sw_data_mask_en_sync1 : std_logic;
  signal pos_calc_sw_data_mask_samples_int : std_logic_vector(15 downto 0);
  signal pos_calc_sw_data_mask_samples_swb : std_logic;
  signal pos_calc_sw_data_mask_samples_swb_delay : std_logic;
  signal pos_calc_sw_data_mask_samples_swb_s0 : std_logic;
  signal pos_calc_sw_data_mask_samples_swb_s1 : std_logic;
  signal pos_calc_sw_data_mask_samples_swb_s2 : std_logic;
  signal pos_calc_tbt_tag_en_int        : std_logic;
  signal pos_calc_tbt_tag_en_sync0      : std_logic;
  signal pos_calc_tbt_tag_en_sync1      : std_logic;
  signal pos_calc_tbt_tag_dly_int       : std_logic_vector(15 downto 0);
  signal pos_calc_tbt_tag_dly_swb       : std_logic;
  signal pos_calc_tbt_tag_dly_swb_delay : std_logic;
  signal pos_calc_tbt_tag_dly_swb_s0    : std_logic;
  signal pos_calc_tbt_tag_dly_swb_s1    : std_logic;
  signal pos_calc_tbt_tag_dly_swb_s2    : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_rst_int : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_rst_int_delay : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_rst_sync0 : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_rst_sync1 : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_rst_sync2 : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_int : std_logic_vector(13 downto 0);
  signal pos_calc_tbt_tag_desync_cnt_lwb : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_lwb_delay : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_lwb_in_progress : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_lwb_s0 : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_lwb_s1 : std_logic;
  signal pos_calc_tbt_tag_desync_cnt_lwb_s2 : std_logic;
  signal pos_calc_tbt_data_mask_ctl_en_int : std_logic;
  signal pos_calc_tbt_data_mask_ctl_en_sync0 : std_logic;
  signal pos_calc_tbt_data_mask_ctl_en_sync1 : std_logic;
  signal pos_calc_tbt_data_mask_samples_beg_int : std_logic_vector(15 downto 0);
  signal pos_calc_tbt_data_mask_samples_beg_swb : std_logic;
  signal pos_calc_tbt_data_mask_samples_beg_swb_delay : std_logic;
  signal pos_calc_tbt_data_mask_samples_beg_swb_s0 : std_logic;
  signal pos_calc_tbt_data_mask_samples_beg_swb_s1 : std_logic;
  signal pos_calc_tbt_data_mask_samples_beg_swb_s2 : std_logic;
  signal pos_calc_tbt_data_mask_samples_end_int : std_logic_vector(15 downto 0);
  signal pos_calc_tbt_data_mask_samples_end_swb : std_logic;
  signal pos_calc_tbt_data_mask_samples_end_swb_delay : std_logic;
  signal pos_calc_tbt_data_mask_samples_end_swb_s0 : std_logic;
  signal pos_calc_tbt_data_mask_samples_end_swb_s1 : std_logic;
  signal pos_calc_tbt_data_mask_samples_end_swb_s2 : std_logic;
  signal pos_calc_monit1_tag_en_int     : std_logic;
  signal pos_calc_monit1_tag_en_sync0   : std_logic;
  signal pos_calc_monit1_tag_en_sync1   : std_logic;
  signal pos_calc_monit1_tag_dly_int    : std_logic_vector(15 downto 0);
  signal pos_calc_monit1_tag_dly_swb    : std_logic;
  signal pos_calc_monit1_tag_dly_swb_delay : std_logic;
  signal pos_calc_monit1_tag_dly_swb_s0 : std_logic;
  signal pos_calc_monit1_tag_dly_swb_s1 : std_logic;
  signal pos_calc_monit1_tag_dly_swb_s2 : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_rst_int : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_rst_int_delay : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_rst_sync0 : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_rst_sync1 : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_rst_sync2 : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_int : std_logic_vector(13 downto 0);
  signal pos_calc_monit1_tag_desync_cnt_lwb : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_lwb_delay : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_lwb_in_progress : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_lwb_s0 : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_lwb_s1 : std_logic;
  signal pos_calc_monit1_tag_desync_cnt_lwb_s2 : std_logic;
  signal pos_calc_monit1_data_mask_ctl_en_int : std_logic;
  signal pos_calc_monit1_data_mask_ctl_en_sync0 : std_logic;
  signal pos_calc_monit1_data_mask_ctl_en_sync1 : std_logic;
  signal pos_calc_monit1_data_mask_samples_beg_int : std_logic_vector(15 downto 0);
  signal pos_calc_monit1_data_mask_samples_beg_swb : std_logic;
  signal pos_calc_monit1_data_mask_samples_beg_swb_delay : std_logic;
  signal pos_calc_monit1_data_mask_samples_beg_swb_s0 : std_logic;
  signal pos_calc_monit1_data_mask_samples_beg_swb_s1 : std_logic;
  signal pos_calc_monit1_data_mask_samples_beg_swb_s2 : std_logic;
  signal pos_calc_monit1_data_mask_samples_end_int : std_logic_vector(15 downto 0);
  signal pos_calc_monit1_data_mask_samples_end_swb : std_logic;
  signal pos_calc_monit1_data_mask_samples_end_swb_delay : std_logic;
  signal pos_calc_monit1_data_mask_samples_end_swb_s0 : std_logic;
  signal pos_calc_monit1_data_mask_samples_end_swb_s1 : std_logic;
  signal pos_calc_monit1_data_mask_samples_end_swb_s2 : std_logic;
  signal pos_calc_monit_tag_en_int      : std_logic;
  signal pos_calc_monit_tag_en_sync0    : std_logic;
  signal pos_calc_monit_tag_en_sync1    : std_logic;
  signal pos_calc_monit_tag_dly_int     : std_logic_vector(15 downto 0);
  signal pos_calc_monit_tag_dly_swb     : std_logic;
  signal pos_calc_monit_tag_dly_swb_delay : std_logic;
  signal pos_calc_monit_tag_dly_swb_s0  : std_logic;
  signal pos_calc_monit_tag_dly_swb_s1  : std_logic;
  signal pos_calc_monit_tag_dly_swb_s2  : std_logic;
  signal pos_calc_monit_tag_desync_cnt_rst_int : std_logic;
  signal pos_calc_monit_tag_desync_cnt_rst_int_delay : std_logic;
  signal pos_calc_monit_tag_desync_cnt_rst_sync0 : std_logic;
  signal pos_calc_monit_tag_desync_cnt_rst_sync1 : std_logic;
  signal pos_calc_monit_tag_desync_cnt_rst_sync2 : std_logic;
  signal pos_calc_monit_tag_desync_cnt_int : std_logic_vector(13 downto 0);
  signal pos_calc_monit_tag_desync_cnt_lwb : std_logic;
  signal pos_calc_monit_tag_desync_cnt_lwb_delay : std_logic;
  signal pos_calc_monit_tag_desync_cnt_lwb_in_progress : std_logic;
  signal pos_calc_monit_tag_desync_cnt_lwb_s0 : std_logic;
  signal pos_calc_monit_tag_desync_cnt_lwb_s1 : std_logic;
  signal pos_calc_monit_tag_desync_cnt_lwb_s2 : std_logic;
  signal pos_calc_monit_data_mask_ctl_en_int : std_logic;
  signal pos_calc_monit_data_mask_ctl_en_sync0 : std_logic;
  signal pos_calc_monit_data_mask_ctl_en_sync1 : std_logic;
  signal pos_calc_monit_data_mask_samples_beg_int : std_logic_vector(15 downto 0);
  signal pos_calc_monit_data_mask_samples_beg_swb : std_logic;
  signal pos_calc_monit_data_mask_samples_beg_swb_delay : std_logic;
  signal pos_calc_monit_data_mask_samples_beg_swb_s0 : std_logic;
  signal pos_calc_monit_data_mask_samples_beg_swb_s1 : std_logic;
  signal pos_calc_monit_data_mask_samples_beg_swb_s2 : std_logic;
  signal pos_calc_monit_data_mask_samples_end_int : std_logic_vector(15 downto 0);
  signal pos_calc_monit_data_mask_samples_end_swb : std_logic;
  signal pos_calc_monit_data_mask_samples_end_swb_delay : std_logic;
  signal pos_calc_monit_data_mask_samples_end_swb_s0 : std_logic;
  signal pos_calc_monit_data_mask_samples_end_swb_s1 : std_logic;
  signal pos_calc_monit_data_mask_samples_end_swb_s2 : std_logic;
  signal pos_calc_offset_x_int          : std_logic_vector(31 downto 0);
  signal pos_calc_offset_x_swb          : std_logic;
  signal pos_calc_offset_x_swb_delay    : std_logic;
  signal pos_calc_offset_x_swb_s0       : std_logic;
  signal pos_calc_offset_x_swb_s1       : std_logic;
  signal pos_calc_offset_x_swb_s2       : std_logic;
  signal pos_calc_offset_y_int          : std_logic_vector(31 downto 0);
  signal pos_calc_offset_y_swb          : std_logic;
  signal pos_calc_offset_y_swb_delay    : std_logic;
  signal pos_calc_offset_y_swb_s0       : std_logic;
  signal pos_calc_offset_y_swb_s1       : std_logic;
  signal pos_calc_offset_y_swb_s2       : std_logic;
  signal pos_calc_ampfifo_monit_full_int : std_logic;
  signal pos_calc_ampfifo_monit_empty_int : std_logic;
  signal pos_calc_ampfifo_monit_usedw_int : std_logic_vector(3 downto 0);
  signal pos_calc_posfifo_monit_full_int : std_logic;
  signal pos_calc_posfifo_monit_empty_int : std_logic;
  signal pos_calc_posfifo_monit_usedw_int : std_logic_vector(3 downto 0);
  signal pos_calc_ampfifo_monit1_full_int : std_logic;
  signal pos_calc_ampfifo_monit1_empty_int : std_logic;
  signal pos_calc_ampfifo_monit1_usedw_int : std_logic_vector(3 downto 0);
  signal pos_calc_posfifo_monit1_full_int : std_logic;
  signal pos_calc_posfifo_monit1_empty_int : std_logic;
  signal pos_calc_posfifo_monit1_usedw_int : std_logic_vector(3 downto 0);
  signal ack_sreg                       : std_logic_vector(9 downto 0);
  signal rddata_reg                     : std_logic_vector(31 downto 0);
  signal wrdata_reg                     : std_logic_vector(31 downto 0);
  signal bwsel_reg                      : std_logic_vector(3 downto 0);
  signal rwaddr_reg                     : std_logic_vector(6 downto 0);
  signal ack_in_progress                : std_logic;
  signal wr_int                         : std_logic;
  signal rd_int                         : std_logic;
  signal allones                        : std_logic_vector(31 downto 0);
  signal allzeros                       : std_logic_vector(31 downto 0);

begin
  -- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
  -- 
  -- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      pos_calc_ds_tbt_thres_val_int <= "00000000000000000000000000";
      pos_calc_ds_tbt_thres_val_swb <= '0';
      pos_calc_ds_tbt_thres_val_swb_delay <= '0';
      pos_calc_ds_fofb_thres_val_int <= "00000000000000000000000000";
      pos_calc_ds_fofb_thres_val_swb <= '0';
      pos_calc_ds_fofb_thres_val_swb_delay <= '0';
      pos_calc_ds_monit_thres_val_int <= "00000000000000000000000000";
      pos_calc_ds_monit_thres_val_swb <= '0';
      pos_calc_ds_monit_thres_val_swb_delay <= '0';
      pos_calc_kx_val_int <= "0000000000000000000000000";
      pos_calc_kx_val_swb <= '0';
      pos_calc_kx_val_swb_delay <= '0';
      pos_calc_ky_val_int <= "0000000000000000000000000";
      pos_calc_ky_val_swb <= '0';
      pos_calc_ky_val_swb_delay <= '0';
      pos_calc_ksum_val_int <= "0000000000000000000000000";
      pos_calc_ksum_val_swb <= '0';
      pos_calc_ksum_val_swb_delay <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_delay <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_delay <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_delay <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_delay <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_delay <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_delay <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_delay <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress <= '0';
      pos_calc_dsp_err_clr_tbt_int <= '0';
      pos_calc_dsp_err_clr_tbt_int_delay <= '0';
      pos_calc_dsp_err_clr_fofb_int <= '0';
      pos_calc_dsp_err_clr_fofb_int_delay <= '0';
      pos_calc_dsp_err_clr_monit_part1_int <= '0';
      pos_calc_dsp_err_clr_monit_part1_int_delay <= '0';
      pos_calc_dsp_err_clr_monit_part2_int <= '0';
      pos_calc_dsp_err_clr_monit_part2_int_delay <= '0';
      pos_calc_dds_cfg_valid_ch0_int <= '0';
      pos_calc_dds_cfg_valid_ch0_int_delay <= '0';
      pos_calc_dds_cfg_test_data_int <= '0';
      pos_calc_dds_cfg_valid_ch1_int <= '0';
      pos_calc_dds_cfg_valid_ch1_int_delay <= '0';
      pos_calc_dds_cfg_valid_ch2_int <= '0';
      pos_calc_dds_cfg_valid_ch2_int_delay <= '0';
      pos_calc_dds_cfg_valid_ch3_int <= '0';
      pos_calc_dds_cfg_valid_ch3_int_delay <= '0';
      pos_calc_dds_pinc_ch0_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch0_val_swb <= '0';
      pos_calc_dds_pinc_ch0_val_swb_delay <= '0';
      pos_calc_dds_pinc_ch1_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch1_val_swb <= '0';
      pos_calc_dds_pinc_ch1_val_swb_delay <= '0';
      pos_calc_dds_pinc_ch2_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch2_val_swb <= '0';
      pos_calc_dds_pinc_ch2_val_swb_delay <= '0';
      pos_calc_dds_pinc_ch3_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch3_val_swb <= '0';
      pos_calc_dds_pinc_ch3_val_swb_delay <= '0';
      pos_calc_dds_poff_ch0_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch0_val_swb <= '0';
      pos_calc_dds_poff_ch0_val_swb_delay <= '0';
      pos_calc_dds_poff_ch1_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch1_val_swb <= '0';
      pos_calc_dds_poff_ch1_val_swb_delay <= '0';
      pos_calc_dds_poff_ch2_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch2_val_swb <= '0';
      pos_calc_dds_poff_ch2_val_swb_delay <= '0';
      pos_calc_dds_poff_ch3_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch3_val_swb <= '0';
      pos_calc_dds_poff_ch3_val_swb_delay <= '0';
      pos_calc_dsp_monit_updt_wr_o <= '0';
      pos_calc_dsp_monit1_updt_wr_o <= '0';
      pos_calc_sw_tag_en_int <= '0';
      pos_calc_sw_tag_desync_cnt_rst_int <= '0';
      pos_calc_sw_tag_desync_cnt_rst_int_delay <= '0';
      pos_calc_sw_tag_desync_cnt_lwb <= '0';
      pos_calc_sw_tag_desync_cnt_lwb_delay <= '0';
      pos_calc_sw_tag_desync_cnt_lwb_in_progress <= '0';
      pos_calc_sw_data_mask_en_int <= '0';
      pos_calc_sw_data_mask_samples_int <= "0000000000000000";
      pos_calc_sw_data_mask_samples_swb <= '0';
      pos_calc_sw_data_mask_samples_swb_delay <= '0';
      pos_calc_tbt_tag_en_int <= '0';
      pos_calc_tbt_tag_dly_int <= "0000000000000000";
      pos_calc_tbt_tag_dly_swb <= '0';
      pos_calc_tbt_tag_dly_swb_delay <= '0';
      pos_calc_tbt_tag_desync_cnt_rst_int <= '0';
      pos_calc_tbt_tag_desync_cnt_rst_int_delay <= '0';
      pos_calc_tbt_tag_desync_cnt_lwb <= '0';
      pos_calc_tbt_tag_desync_cnt_lwb_delay <= '0';
      pos_calc_tbt_tag_desync_cnt_lwb_in_progress <= '0';
      pos_calc_tbt_data_mask_ctl_en_int <= '0';
      pos_calc_tbt_data_mask_samples_beg_int <= "0000000000000000";
      pos_calc_tbt_data_mask_samples_beg_swb <= '0';
      pos_calc_tbt_data_mask_samples_beg_swb_delay <= '0';
      pos_calc_tbt_data_mask_samples_end_int <= "0000000000000000";
      pos_calc_tbt_data_mask_samples_end_swb <= '0';
      pos_calc_tbt_data_mask_samples_end_swb_delay <= '0';
      pos_calc_monit1_tag_en_int <= '0';
      pos_calc_monit1_tag_dly_int <= "0000000000000000";
      pos_calc_monit1_tag_dly_swb <= '0';
      pos_calc_monit1_tag_dly_swb_delay <= '0';
      pos_calc_monit1_tag_desync_cnt_rst_int <= '0';
      pos_calc_monit1_tag_desync_cnt_rst_int_delay <= '0';
      pos_calc_monit1_tag_desync_cnt_lwb <= '0';
      pos_calc_monit1_tag_desync_cnt_lwb_delay <= '0';
      pos_calc_monit1_tag_desync_cnt_lwb_in_progress <= '0';
      pos_calc_monit1_data_mask_ctl_en_int <= '0';
      pos_calc_monit1_data_mask_samples_beg_int <= "0000000000000000";
      pos_calc_monit1_data_mask_samples_beg_swb <= '0';
      pos_calc_monit1_data_mask_samples_beg_swb_delay <= '0';
      pos_calc_monit1_data_mask_samples_end_int <= "0000000000000000";
      pos_calc_monit1_data_mask_samples_end_swb <= '0';
      pos_calc_monit1_data_mask_samples_end_swb_delay <= '0';
      pos_calc_monit_tag_en_int <= '0';
      pos_calc_monit_tag_dly_int <= "0000000000000000";
      pos_calc_monit_tag_dly_swb <= '0';
      pos_calc_monit_tag_dly_swb_delay <= '0';
      pos_calc_monit_tag_desync_cnt_rst_int <= '0';
      pos_calc_monit_tag_desync_cnt_rst_int_delay <= '0';
      pos_calc_monit_tag_desync_cnt_lwb <= '0';
      pos_calc_monit_tag_desync_cnt_lwb_delay <= '0';
      pos_calc_monit_tag_desync_cnt_lwb_in_progress <= '0';
      pos_calc_monit_data_mask_ctl_en_int <= '0';
      pos_calc_monit_data_mask_samples_beg_int <= "0000000000000000";
      pos_calc_monit_data_mask_samples_beg_swb <= '0';
      pos_calc_monit_data_mask_samples_beg_swb_delay <= '0';
      pos_calc_monit_data_mask_samples_end_int <= "0000000000000000";
      pos_calc_monit_data_mask_samples_end_swb <= '0';
      pos_calc_monit_data_mask_samples_end_swb_delay <= '0';
      pos_calc_offset_x_int <= "00000000000000000000000000000000";
      pos_calc_offset_x_swb <= '0';
      pos_calc_offset_x_swb_delay <= '0';
      pos_calc_offset_y_int <= "00000000000000000000000000000000";
      pos_calc_offset_y_swb <= '0';
      pos_calc_offset_y_swb_delay <= '0';
      pos_calc_ampfifo_monit_rdreq_int <= '0';
      pos_calc_posfifo_monit_rdreq_int <= '0';
      pos_calc_ampfifo_monit1_rdreq_int <= '0';
      pos_calc_posfifo_monit1_rdreq_int <= '0';
    elsif rising_edge(clk_sys_i) then
      -- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          pos_calc_dsp_monit_updt_wr_o <= '0';
          pos_calc_dsp_monit1_updt_wr_o <= '0';
          ack_in_progress <= '0';
        else
          pos_calc_ds_tbt_thres_val_swb <= pos_calc_ds_tbt_thres_val_swb_delay;
          pos_calc_ds_tbt_thres_val_swb_delay <= '0';
          pos_calc_ds_fofb_thres_val_swb <= pos_calc_ds_fofb_thres_val_swb_delay;
          pos_calc_ds_fofb_thres_val_swb_delay <= '0';
          pos_calc_ds_monit_thres_val_swb <= pos_calc_ds_monit_thres_val_swb_delay;
          pos_calc_ds_monit_thres_val_swb_delay <= '0';
          pos_calc_kx_val_swb <= pos_calc_kx_val_swb_delay;
          pos_calc_kx_val_swb_delay <= '0';
          pos_calc_ky_val_swb <= pos_calc_ky_val_swb_delay;
          pos_calc_ky_val_swb_delay <= '0';
          pos_calc_ksum_val_swb <= pos_calc_ksum_val_swb_delay;
          pos_calc_ksum_val_swb_delay <= '0';
          pos_calc_dsp_ctnr_tbt_ch01_lwb <= pos_calc_dsp_ctnr_tbt_ch01_lwb_delay;
          pos_calc_dsp_ctnr_tbt_ch01_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr_tbt_ch01_int;
            pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr_tbt_ch23_lwb <= pos_calc_dsp_ctnr_tbt_ch23_lwb_delay;
          pos_calc_dsp_ctnr_tbt_ch23_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr_tbt_ch23_int;
            pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr_fofb_ch01_lwb <= pos_calc_dsp_ctnr_fofb_ch01_lwb_delay;
          pos_calc_dsp_ctnr_fofb_ch01_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr_fofb_ch01_int;
            pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr_fofb_ch23_lwb <= pos_calc_dsp_ctnr_fofb_ch23_lwb_delay;
          pos_calc_dsp_ctnr_fofb_ch23_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr_fofb_ch23_int;
            pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr1_monit_cic_lwb <= pos_calc_dsp_ctnr1_monit_cic_lwb_delay;
          pos_calc_dsp_ctnr1_monit_cic_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr1_monit_cic_int;
            pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr1_monit_cfir_lwb <= pos_calc_dsp_ctnr1_monit_cfir_lwb_delay;
          pos_calc_dsp_ctnr1_monit_cfir_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr1_monit_cfir_int;
            pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr2_monit_pfir_lwb <= pos_calc_dsp_ctnr2_monit_pfir_lwb_delay;
          pos_calc_dsp_ctnr2_monit_pfir_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr2_monit_pfir_int;
            pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr2_monit_fir_01_lwb <= pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay;
          pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr2_monit_fir_01_int;
            pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_err_clr_tbt_int <= pos_calc_dsp_err_clr_tbt_int_delay;
          pos_calc_dsp_err_clr_tbt_int_delay <= '0';
          pos_calc_dsp_err_clr_fofb_int <= pos_calc_dsp_err_clr_fofb_int_delay;
          pos_calc_dsp_err_clr_fofb_int_delay <= '0';
          pos_calc_dsp_err_clr_monit_part1_int <= pos_calc_dsp_err_clr_monit_part1_int_delay;
          pos_calc_dsp_err_clr_monit_part1_int_delay <= '0';
          pos_calc_dsp_err_clr_monit_part2_int <= pos_calc_dsp_err_clr_monit_part2_int_delay;
          pos_calc_dsp_err_clr_monit_part2_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch0_int <= pos_calc_dds_cfg_valid_ch0_int_delay;
          pos_calc_dds_cfg_valid_ch0_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch1_int <= pos_calc_dds_cfg_valid_ch1_int_delay;
          pos_calc_dds_cfg_valid_ch1_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch2_int <= pos_calc_dds_cfg_valid_ch2_int_delay;
          pos_calc_dds_cfg_valid_ch2_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch3_int <= pos_calc_dds_cfg_valid_ch3_int_delay;
          pos_calc_dds_cfg_valid_ch3_int_delay <= '0';
          pos_calc_dds_pinc_ch0_val_swb <= pos_calc_dds_pinc_ch0_val_swb_delay;
          pos_calc_dds_pinc_ch0_val_swb_delay <= '0';
          pos_calc_dds_pinc_ch1_val_swb <= pos_calc_dds_pinc_ch1_val_swb_delay;
          pos_calc_dds_pinc_ch1_val_swb_delay <= '0';
          pos_calc_dds_pinc_ch2_val_swb <= pos_calc_dds_pinc_ch2_val_swb_delay;
          pos_calc_dds_pinc_ch2_val_swb_delay <= '0';
          pos_calc_dds_pinc_ch3_val_swb <= pos_calc_dds_pinc_ch3_val_swb_delay;
          pos_calc_dds_pinc_ch3_val_swb_delay <= '0';
          pos_calc_dds_poff_ch0_val_swb <= pos_calc_dds_poff_ch0_val_swb_delay;
          pos_calc_dds_poff_ch0_val_swb_delay <= '0';
          pos_calc_dds_poff_ch1_val_swb <= pos_calc_dds_poff_ch1_val_swb_delay;
          pos_calc_dds_poff_ch1_val_swb_delay <= '0';
          pos_calc_dds_poff_ch2_val_swb <= pos_calc_dds_poff_ch2_val_swb_delay;
          pos_calc_dds_poff_ch2_val_swb_delay <= '0';
          pos_calc_dds_poff_ch3_val_swb <= pos_calc_dds_poff_ch3_val_swb_delay;
          pos_calc_dds_poff_ch3_val_swb_delay <= '0';
          pos_calc_dsp_monit_updt_wr_o <= '0';
          pos_calc_dsp_monit1_updt_wr_o <= '0';
          pos_calc_sw_tag_desync_cnt_rst_int <= pos_calc_sw_tag_desync_cnt_rst_int_delay;
          pos_calc_sw_tag_desync_cnt_rst_int_delay <= '0';
          pos_calc_sw_tag_desync_cnt_lwb <= pos_calc_sw_tag_desync_cnt_lwb_delay;
          pos_calc_sw_tag_desync_cnt_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_sw_tag_desync_cnt_lwb_in_progress = '1')) then
            rddata_reg(22 downto 9) <= pos_calc_sw_tag_desync_cnt_int;
            pos_calc_sw_tag_desync_cnt_lwb_in_progress <= '0';
          end if;
          pos_calc_sw_data_mask_samples_swb <= pos_calc_sw_data_mask_samples_swb_delay;
          pos_calc_sw_data_mask_samples_swb_delay <= '0';
          pos_calc_tbt_tag_dly_swb <= pos_calc_tbt_tag_dly_swb_delay;
          pos_calc_tbt_tag_dly_swb_delay <= '0';
          pos_calc_tbt_tag_desync_cnt_rst_int <= pos_calc_tbt_tag_desync_cnt_rst_int_delay;
          pos_calc_tbt_tag_desync_cnt_rst_int_delay <= '0';
          pos_calc_tbt_tag_desync_cnt_lwb <= pos_calc_tbt_tag_desync_cnt_lwb_delay;
          pos_calc_tbt_tag_desync_cnt_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_tbt_tag_desync_cnt_lwb_in_progress = '1')) then
            rddata_reg(31 downto 18) <= pos_calc_tbt_tag_desync_cnt_int;
            pos_calc_tbt_tag_desync_cnt_lwb_in_progress <= '0';
          end if;
          pos_calc_tbt_data_mask_samples_beg_swb <= pos_calc_tbt_data_mask_samples_beg_swb_delay;
          pos_calc_tbt_data_mask_samples_beg_swb_delay <= '0';
          pos_calc_tbt_data_mask_samples_end_swb <= pos_calc_tbt_data_mask_samples_end_swb_delay;
          pos_calc_tbt_data_mask_samples_end_swb_delay <= '0';
          pos_calc_monit1_tag_dly_swb <= pos_calc_monit1_tag_dly_swb_delay;
          pos_calc_monit1_tag_dly_swb_delay <= '0';
          pos_calc_monit1_tag_desync_cnt_rst_int <= pos_calc_monit1_tag_desync_cnt_rst_int_delay;
          pos_calc_monit1_tag_desync_cnt_rst_int_delay <= '0';
          pos_calc_monit1_tag_desync_cnt_lwb <= pos_calc_monit1_tag_desync_cnt_lwb_delay;
          pos_calc_monit1_tag_desync_cnt_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_monit1_tag_desync_cnt_lwb_in_progress = '1')) then
            rddata_reg(31 downto 18) <= pos_calc_monit1_tag_desync_cnt_int;
            pos_calc_monit1_tag_desync_cnt_lwb_in_progress <= '0';
          end if;
          pos_calc_monit1_data_mask_samples_beg_swb <= pos_calc_monit1_data_mask_samples_beg_swb_delay;
          pos_calc_monit1_data_mask_samples_beg_swb_delay <= '0';
          pos_calc_monit1_data_mask_samples_end_swb <= pos_calc_monit1_data_mask_samples_end_swb_delay;
          pos_calc_monit1_data_mask_samples_end_swb_delay <= '0';
          pos_calc_monit_tag_dly_swb <= pos_calc_monit_tag_dly_swb_delay;
          pos_calc_monit_tag_dly_swb_delay <= '0';
          pos_calc_monit_tag_desync_cnt_rst_int <= pos_calc_monit_tag_desync_cnt_rst_int_delay;
          pos_calc_monit_tag_desync_cnt_rst_int_delay <= '0';
          pos_calc_monit_tag_desync_cnt_lwb <= pos_calc_monit_tag_desync_cnt_lwb_delay;
          pos_calc_monit_tag_desync_cnt_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_monit_tag_desync_cnt_lwb_in_progress = '1')) then
            rddata_reg(31 downto 18) <= pos_calc_monit_tag_desync_cnt_int;
            pos_calc_monit_tag_desync_cnt_lwb_in_progress <= '0';
          end if;
          pos_calc_monit_data_mask_samples_beg_swb <= pos_calc_monit_data_mask_samples_beg_swb_delay;
          pos_calc_monit_data_mask_samples_beg_swb_delay <= '0';
          pos_calc_monit_data_mask_samples_end_swb <= pos_calc_monit_data_mask_samples_end_swb_delay;
          pos_calc_monit_data_mask_samples_end_swb_delay <= '0';
          pos_calc_offset_x_swb <= pos_calc_offset_x_swb_delay;
          pos_calc_offset_x_swb_delay <= '0';
          pos_calc_offset_y_swb <= pos_calc_offset_y_swb_delay;
          pos_calc_offset_y_swb_delay <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(6 downto 0) is
          when "0000000" => 
            if (wb_we_i = '1') then
              pos_calc_ds_tbt_thres_val_int <= wrdata_reg(25 downto 0);
              pos_calc_ds_tbt_thres_val_swb <= '1';
              pos_calc_ds_tbt_thres_val_swb_delay <= '1';
            end if;
            rddata_reg(25 downto 0) <= pos_calc_ds_tbt_thres_val_int;
            rddata_reg(31 downto 26) <= pos_calc_ds_tbt_thres_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0000001" => 
            if (wb_we_i = '1') then
              pos_calc_ds_fofb_thres_val_int <= wrdata_reg(25 downto 0);
              pos_calc_ds_fofb_thres_val_swb <= '1';
              pos_calc_ds_fofb_thres_val_swb_delay <= '1';
            end if;
            rddata_reg(25 downto 0) <= pos_calc_ds_fofb_thres_val_int;
            rddata_reg(31 downto 26) <= pos_calc_ds_fofb_thres_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0000010" => 
            if (wb_we_i = '1') then
              pos_calc_ds_monit_thres_val_int <= wrdata_reg(25 downto 0);
              pos_calc_ds_monit_thres_val_swb <= '1';
              pos_calc_ds_monit_thres_val_swb_delay <= '1';
            end if;
            rddata_reg(25 downto 0) <= pos_calc_ds_monit_thres_val_int;
            rddata_reg(31 downto 26) <= pos_calc_ds_monit_thres_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0000011" => 
            if (wb_we_i = '1') then
              pos_calc_kx_val_int <= wrdata_reg(24 downto 0);
              pos_calc_kx_val_swb <= '1';
              pos_calc_kx_val_swb_delay <= '1';
            end if;
            rddata_reg(24 downto 0) <= pos_calc_kx_val_int;
            rddata_reg(31 downto 25) <= pos_calc_kx_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0000100" => 
            if (wb_we_i = '1') then
              pos_calc_ky_val_int <= wrdata_reg(24 downto 0);
              pos_calc_ky_val_swb <= '1';
              pos_calc_ky_val_swb_delay <= '1';
            end if;
            rddata_reg(24 downto 0) <= pos_calc_ky_val_int;
            rddata_reg(31 downto 25) <= pos_calc_ky_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0000101" => 
            if (wb_we_i = '1') then
              pos_calc_ksum_val_int <= wrdata_reg(24 downto 0);
              pos_calc_ksum_val_swb <= '1';
              pos_calc_ksum_val_swb_delay <= '1';
            end if;
            rddata_reg(24 downto 0) <= pos_calc_ksum_val_int;
            rddata_reg(31 downto 25) <= pos_calc_ksum_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0000110" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_tbt_ch01_lwb <= '1';
              pos_calc_dsp_ctnr_tbt_ch01_lwb_delay <= '1';
              pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_tbt_ch23_lwb <= '1';
              pos_calc_dsp_ctnr_tbt_ch23_lwb_delay <= '1';
              pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0000111" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_fofb_ch01_lwb <= '1';
              pos_calc_dsp_ctnr_fofb_ch01_lwb_delay <= '1';
              pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_fofb_ch23_lwb <= '1';
              pos_calc_dsp_ctnr_fofb_ch23_lwb_delay <= '1';
              pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0001000" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr1_monit_cic_lwb <= '1';
              pos_calc_dsp_ctnr1_monit_cic_lwb_delay <= '1';
              pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr1_monit_cfir_lwb <= '1';
              pos_calc_dsp_ctnr1_monit_cfir_lwb_delay <= '1';
              pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0001001" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr2_monit_pfir_lwb <= '1';
              pos_calc_dsp_ctnr2_monit_pfir_lwb_delay <= '1';
              pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr2_monit_fir_01_lwb <= '1';
              pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay <= '1';
              pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0001010" => 
            if (wb_we_i = '1') then
              pos_calc_dsp_err_clr_tbt_int <= wrdata_reg(0);
              pos_calc_dsp_err_clr_tbt_int_delay <= wrdata_reg(0);
              pos_calc_dsp_err_clr_fofb_int <= wrdata_reg(1);
              pos_calc_dsp_err_clr_fofb_int_delay <= wrdata_reg(1);
              pos_calc_dsp_err_clr_monit_part1_int <= wrdata_reg(2);
              pos_calc_dsp_err_clr_monit_part1_int_delay <= wrdata_reg(2);
              pos_calc_dsp_err_clr_monit_part2_int <= wrdata_reg(3);
              pos_calc_dsp_err_clr_monit_part2_int_delay <= wrdata_reg(3);
            end if;
            rddata_reg(0) <= '0';
            rddata_reg(1) <= '0';
            rddata_reg(2) <= '0';
            rddata_reg(3) <= '0';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "0001011" => 
            if (wb_we_i = '1') then
              pos_calc_dds_cfg_valid_ch0_int <= wrdata_reg(0);
              pos_calc_dds_cfg_valid_ch0_int_delay <= wrdata_reg(0);
              pos_calc_dds_cfg_test_data_int <= wrdata_reg(1);
              pos_calc_dds_cfg_valid_ch1_int <= wrdata_reg(8);
              pos_calc_dds_cfg_valid_ch1_int_delay <= wrdata_reg(8);
              pos_calc_dds_cfg_valid_ch2_int <= wrdata_reg(16);
              pos_calc_dds_cfg_valid_ch2_int_delay <= wrdata_reg(16);
              pos_calc_dds_cfg_valid_ch3_int <= wrdata_reg(24);
              pos_calc_dds_cfg_valid_ch3_int_delay <= wrdata_reg(24);
            end if;
            rddata_reg(0) <= '0';
            rddata_reg(1) <= pos_calc_dds_cfg_test_data_int;
            rddata_reg(7 downto 2) <= pos_calc_dds_cfg_reserved_ch0_i;
            rddata_reg(8) <= '0';
            rddata_reg(15 downto 9) <= pos_calc_dds_cfg_reserved_ch1_i;
            rddata_reg(16) <= '0';
            rddata_reg(23 downto 17) <= pos_calc_dds_cfg_reserved_ch2_i;
            rddata_reg(24) <= '0';
            rddata_reg(31 downto 25) <= pos_calc_dds_cfg_reserved_ch3_i;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "0001100" => 
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch0_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch0_val_swb <= '1';
              pos_calc_dds_pinc_ch0_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch0_val_int;
            rddata_reg(31 downto 30) <= pos_calc_dds_pinc_ch0_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0001101" => 
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch1_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch1_val_swb <= '1';
              pos_calc_dds_pinc_ch1_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch1_val_int;
            rddata_reg(31 downto 30) <= pos_calc_dds_pinc_ch1_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0001110" => 
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch2_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch2_val_swb <= '1';
              pos_calc_dds_pinc_ch2_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch2_val_int;
            rddata_reg(31 downto 30) <= pos_calc_dds_pinc_ch2_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0001111" => 
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch3_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch3_val_swb <= '1';
              pos_calc_dds_pinc_ch3_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch3_val_int;
            rddata_reg(31 downto 30) <= pos_calc_dds_pinc_ch3_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0010000" => 
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch0_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch0_val_swb <= '1';
              pos_calc_dds_poff_ch0_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch0_val_int;
            rddata_reg(31 downto 30) <= pos_calc_dds_poff_ch0_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0010001" => 
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch1_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch1_val_swb <= '1';
              pos_calc_dds_poff_ch1_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch1_val_int;
            rddata_reg(31 downto 30) <= pos_calc_dds_poff_ch1_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0010010" => 
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch2_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch2_val_swb <= '1';
              pos_calc_dds_poff_ch2_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch2_val_int;
            rddata_reg(31 downto 30) <= pos_calc_dds_poff_ch2_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0010011" => 
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch3_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch3_val_swb <= '1';
              pos_calc_dds_poff_ch3_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch3_val_int;
            rddata_reg(31 downto 30) <= pos_calc_dds_poff_ch3_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0010100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_amp_ch0_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0010101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_amp_ch1_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0010110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_amp_ch2_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0010111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_amp_ch3_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_pos_x_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_pos_y_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_pos_q_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_pos_sum_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011100" => 
            if (wb_we_i = '1') then
              pos_calc_dsp_monit_updt_wr_o <= '1';
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit1_amp_ch0_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit1_amp_ch1_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit1_amp_ch2_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0100000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit1_amp_ch3_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0100001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit1_pos_x_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0100010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit1_pos_y_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0100011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit1_pos_q_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0100100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit1_pos_sum_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0100101" => 
            if (wb_we_i = '1') then
              pos_calc_dsp_monit1_updt_wr_o <= '1';
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0111010" => 
            if (wb_we_i = '1') then
              pos_calc_sw_tag_en_int <= wrdata_reg(0);
              pos_calc_sw_tag_desync_cnt_rst_int <= wrdata_reg(8);
              pos_calc_sw_tag_desync_cnt_rst_int_delay <= wrdata_reg(8);
            end if;
            rddata_reg(0) <= pos_calc_sw_tag_en_int;
            rddata_reg(8) <= '0';
            if (wb_we_i = '0') then
              pos_calc_sw_tag_desync_cnt_lwb <= '1';
              pos_calc_sw_tag_desync_cnt_lwb_delay <= '1';
              pos_calc_sw_tag_desync_cnt_lwb_in_progress <= '1';
            end if;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0111011" => 
            if (wb_we_i = '1') then
              pos_calc_sw_data_mask_en_int <= wrdata_reg(0);
              pos_calc_sw_data_mask_samples_int <= wrdata_reg(16 downto 1);
              pos_calc_sw_data_mask_samples_swb <= '1';
              pos_calc_sw_data_mask_samples_swb_delay <= '1';
            end if;
            rddata_reg(0) <= pos_calc_sw_data_mask_en_int;
            rddata_reg(16 downto 1) <= pos_calc_sw_data_mask_samples_int;
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0111100" => 
            if (wb_we_i = '1') then
              pos_calc_tbt_tag_en_int <= wrdata_reg(0);
              pos_calc_tbt_tag_dly_int <= wrdata_reg(16 downto 1);
              pos_calc_tbt_tag_dly_swb <= '1';
              pos_calc_tbt_tag_dly_swb_delay <= '1';
              pos_calc_tbt_tag_desync_cnt_rst_int <= wrdata_reg(17);
              pos_calc_tbt_tag_desync_cnt_rst_int_delay <= wrdata_reg(17);
            end if;
            rddata_reg(0) <= pos_calc_tbt_tag_en_int;
            rddata_reg(16 downto 1) <= pos_calc_tbt_tag_dly_int;
            rddata_reg(17) <= '0';
            if (wb_we_i = '0') then
              pos_calc_tbt_tag_desync_cnt_lwb <= '1';
              pos_calc_tbt_tag_desync_cnt_lwb_delay <= '1';
              pos_calc_tbt_tag_desync_cnt_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0111101" => 
            if (wb_we_i = '1') then
              pos_calc_tbt_data_mask_ctl_en_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= pos_calc_tbt_data_mask_ctl_en_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0111110" => 
            if (wb_we_i = '1') then
              pos_calc_tbt_data_mask_samples_beg_int <= wrdata_reg(15 downto 0);
              pos_calc_tbt_data_mask_samples_beg_swb <= '1';
              pos_calc_tbt_data_mask_samples_beg_swb_delay <= '1';
              pos_calc_tbt_data_mask_samples_end_int <= wrdata_reg(31 downto 16);
              pos_calc_tbt_data_mask_samples_end_swb <= '1';
              pos_calc_tbt_data_mask_samples_end_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= pos_calc_tbt_data_mask_samples_beg_int;
            rddata_reg(31 downto 16) <= pos_calc_tbt_data_mask_samples_end_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0111111" => 
            if (wb_we_i = '1') then
              pos_calc_monit1_tag_en_int <= wrdata_reg(0);
              pos_calc_monit1_tag_dly_int <= wrdata_reg(16 downto 1);
              pos_calc_monit1_tag_dly_swb <= '1';
              pos_calc_monit1_tag_dly_swb_delay <= '1';
              pos_calc_monit1_tag_desync_cnt_rst_int <= wrdata_reg(17);
              pos_calc_monit1_tag_desync_cnt_rst_int_delay <= wrdata_reg(17);
            end if;
            rddata_reg(0) <= pos_calc_monit1_tag_en_int;
            rddata_reg(16 downto 1) <= pos_calc_monit1_tag_dly_int;
            rddata_reg(17) <= '0';
            if (wb_we_i = '0') then
              pos_calc_monit1_tag_desync_cnt_lwb <= '1';
              pos_calc_monit1_tag_desync_cnt_lwb_delay <= '1';
              pos_calc_monit1_tag_desync_cnt_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "1000000" => 
            if (wb_we_i = '1') then
              pos_calc_monit1_data_mask_ctl_en_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= pos_calc_monit1_data_mask_ctl_en_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "1000001" => 
            if (wb_we_i = '1') then
              pos_calc_monit1_data_mask_samples_beg_int <= wrdata_reg(15 downto 0);
              pos_calc_monit1_data_mask_samples_beg_swb <= '1';
              pos_calc_monit1_data_mask_samples_beg_swb_delay <= '1';
              pos_calc_monit1_data_mask_samples_end_int <= wrdata_reg(31 downto 16);
              pos_calc_monit1_data_mask_samples_end_swb <= '1';
              pos_calc_monit1_data_mask_samples_end_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= pos_calc_monit1_data_mask_samples_beg_int;
            rddata_reg(31 downto 16) <= pos_calc_monit1_data_mask_samples_end_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "1000010" => 
            if (wb_we_i = '1') then
              pos_calc_monit_tag_en_int <= wrdata_reg(0);
              pos_calc_monit_tag_dly_int <= wrdata_reg(16 downto 1);
              pos_calc_monit_tag_dly_swb <= '1';
              pos_calc_monit_tag_dly_swb_delay <= '1';
              pos_calc_monit_tag_desync_cnt_rst_int <= wrdata_reg(17);
              pos_calc_monit_tag_desync_cnt_rst_int_delay <= wrdata_reg(17);
            end if;
            rddata_reg(0) <= pos_calc_monit_tag_en_int;
            rddata_reg(16 downto 1) <= pos_calc_monit_tag_dly_int;
            rddata_reg(17) <= '0';
            if (wb_we_i = '0') then
              pos_calc_monit_tag_desync_cnt_lwb <= '1';
              pos_calc_monit_tag_desync_cnt_lwb_delay <= '1';
              pos_calc_monit_tag_desync_cnt_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "1000011" => 
            if (wb_we_i = '1') then
              pos_calc_monit_data_mask_ctl_en_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= pos_calc_monit_data_mask_ctl_en_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "1000100" => 
            if (wb_we_i = '1') then
              pos_calc_monit_data_mask_samples_beg_int <= wrdata_reg(15 downto 0);
              pos_calc_monit_data_mask_samples_beg_swb <= '1';
              pos_calc_monit_data_mask_samples_beg_swb_delay <= '1';
              pos_calc_monit_data_mask_samples_end_int <= wrdata_reg(31 downto 16);
              pos_calc_monit_data_mask_samples_end_swb <= '1';
              pos_calc_monit_data_mask_samples_end_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= pos_calc_monit_data_mask_samples_beg_int;
            rddata_reg(31 downto 16) <= pos_calc_monit_data_mask_samples_end_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "1000101" => 
            if (wb_we_i = '1') then
              pos_calc_offset_x_int <= wrdata_reg(31 downto 0);
              pos_calc_offset_x_swb <= '1';
              pos_calc_offset_x_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= pos_calc_offset_x_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "1000110" => 
            if (wb_we_i = '1') then
              pos_calc_offset_y_int <= wrdata_reg(31 downto 0);
              pos_calc_offset_y_swb <= '1';
              pos_calc_offset_y_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= pos_calc_offset_y_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "0100110" => 
            if (wb_we_i = '1') then
            end if;
            if (pos_calc_ampfifo_monit_rdreq_int_d0 = '0') then
              pos_calc_ampfifo_monit_rdreq_int <= not pos_calc_ampfifo_monit_rdreq_int;
            else
              rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit_out_int(31 downto 0);
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end if;
          when "0100111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit_out_int(63 downto 32);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit_out_int(95 downto 64);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit_out_int(127 downto 96);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(16) <= pos_calc_ampfifo_monit_full_int;
            rddata_reg(17) <= pos_calc_ampfifo_monit_empty_int;
            rddata_reg(3 downto 0) <= pos_calc_ampfifo_monit_usedw_int;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101011" => 
            if (wb_we_i = '1') then
            end if;
            if (pos_calc_posfifo_monit_rdreq_int_d0 = '0') then
              pos_calc_posfifo_monit_rdreq_int <= not pos_calc_posfifo_monit_rdreq_int;
            else
              rddata_reg(31 downto 0) <= pos_calc_posfifo_monit_out_int(31 downto 0);
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end if;
          when "0101100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit_out_int(63 downto 32);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit_out_int(95 downto 64);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit_out_int(127 downto 96);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(16) <= pos_calc_posfifo_monit_full_int;
            rddata_reg(17) <= pos_calc_posfifo_monit_empty_int;
            rddata_reg(3 downto 0) <= pos_calc_posfifo_monit_usedw_int;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0110000" => 
            if (wb_we_i = '1') then
            end if;
            if (pos_calc_ampfifo_monit1_rdreq_int_d0 = '0') then
              pos_calc_ampfifo_monit1_rdreq_int <= not pos_calc_ampfifo_monit1_rdreq_int;
            else
              rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit1_out_int(31 downto 0);
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end if;
          when "0110001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit1_out_int(63 downto 32);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0110010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit1_out_int(95 downto 64);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0110011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit1_out_int(127 downto 96);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0110100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(16) <= pos_calc_ampfifo_monit1_full_int;
            rddata_reg(17) <= pos_calc_ampfifo_monit1_empty_int;
            rddata_reg(3 downto 0) <= pos_calc_ampfifo_monit1_usedw_int;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0110101" => 
            if (wb_we_i = '1') then
            end if;
            if (pos_calc_posfifo_monit1_rdreq_int_d0 = '0') then
              pos_calc_posfifo_monit1_rdreq_int <= not pos_calc_posfifo_monit1_rdreq_int;
            else
              rddata_reg(31 downto 0) <= pos_calc_posfifo_monit1_out_int(31 downto 0);
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end if;
          when "0110110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit1_out_int(63 downto 32);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0110111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit1_out_int(95 downto 64);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0111000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit1_out_int(127 downto 96);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0111001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(16) <= pos_calc_posfifo_monit1_full_int;
            rddata_reg(17) <= pos_calc_posfifo_monit1_empty_int;
            rddata_reg(3 downto 0) <= pos_calc_posfifo_monit1_usedw_int;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
            -- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;


  -- Drive the data output bus
  wb_dat_o <= rddata_reg;
  -- Config divisor threshold TBT
  -- asynchronous std_logic_vector register : Config divisor threshold TBT (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ds_tbt_thres_val_swb_s0 <= '0';
      pos_calc_ds_tbt_thres_val_swb_s1 <= '0';
      pos_calc_ds_tbt_thres_val_swb_s2 <= '0';
      pos_calc_ds_tbt_thres_val_o <= "00000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ds_tbt_thres_val_swb_s0 <= pos_calc_ds_tbt_thres_val_swb;
      pos_calc_ds_tbt_thres_val_swb_s1 <= pos_calc_ds_tbt_thres_val_swb_s0;
      pos_calc_ds_tbt_thres_val_swb_s2 <= pos_calc_ds_tbt_thres_val_swb_s1;
      if ((pos_calc_ds_tbt_thres_val_swb_s2 = '0') and (pos_calc_ds_tbt_thres_val_swb_s1 = '1')) then
        pos_calc_ds_tbt_thres_val_o <= pos_calc_ds_tbt_thres_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- Config divisor threshold FOFB
  -- asynchronous std_logic_vector register : Config divisor threshold FOFB (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ds_fofb_thres_val_swb_s0 <= '0';
      pos_calc_ds_fofb_thres_val_swb_s1 <= '0';
      pos_calc_ds_fofb_thres_val_swb_s2 <= '0';
      pos_calc_ds_fofb_thres_val_o <= "00000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ds_fofb_thres_val_swb_s0 <= pos_calc_ds_fofb_thres_val_swb;
      pos_calc_ds_fofb_thres_val_swb_s1 <= pos_calc_ds_fofb_thres_val_swb_s0;
      pos_calc_ds_fofb_thres_val_swb_s2 <= pos_calc_ds_fofb_thres_val_swb_s1;
      if ((pos_calc_ds_fofb_thres_val_swb_s2 = '0') and (pos_calc_ds_fofb_thres_val_swb_s1 = '1')) then
        pos_calc_ds_fofb_thres_val_o <= pos_calc_ds_fofb_thres_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- Config Divisor Threshold Monit.
  -- asynchronous std_logic_vector register : Config Divisor Threshold Monit. (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ds_monit_thres_val_swb_s0 <= '0';
      pos_calc_ds_monit_thres_val_swb_s1 <= '0';
      pos_calc_ds_monit_thres_val_swb_s2 <= '0';
      pos_calc_ds_monit_thres_val_o <= "00000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ds_monit_thres_val_swb_s0 <= pos_calc_ds_monit_thres_val_swb;
      pos_calc_ds_monit_thres_val_swb_s1 <= pos_calc_ds_monit_thres_val_swb_s0;
      pos_calc_ds_monit_thres_val_swb_s2 <= pos_calc_ds_monit_thres_val_swb_s1;
      if ((pos_calc_ds_monit_thres_val_swb_s2 = '0') and (pos_calc_ds_monit_thres_val_swb_s1 = '1')) then
        pos_calc_ds_monit_thres_val_o <= pos_calc_ds_monit_thres_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- BPM sensitivity (X axis) parameter register
  -- asynchronous std_logic_vector register : BPM sensitivity (X axis) parameter register (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_kx_val_swb_s0 <= '0';
      pos_calc_kx_val_swb_s1 <= '0';
      pos_calc_kx_val_swb_s2 <= '0';
      pos_calc_kx_val_o <= "0000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_kx_val_swb_s0 <= pos_calc_kx_val_swb;
      pos_calc_kx_val_swb_s1 <= pos_calc_kx_val_swb_s0;
      pos_calc_kx_val_swb_s2 <= pos_calc_kx_val_swb_s1;
      if ((pos_calc_kx_val_swb_s2 = '0') and (pos_calc_kx_val_swb_s1 = '1')) then
        pos_calc_kx_val_o <= pos_calc_kx_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- BPM sensitivity (Y axis) parameter register
  -- asynchronous std_logic_vector register : BPM sensitivity (Y axis) parameter register (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ky_val_swb_s0 <= '0';
      pos_calc_ky_val_swb_s1 <= '0';
      pos_calc_ky_val_swb_s2 <= '0';
      pos_calc_ky_val_o <= "0000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ky_val_swb_s0 <= pos_calc_ky_val_swb;
      pos_calc_ky_val_swb_s1 <= pos_calc_ky_val_swb_s0;
      pos_calc_ky_val_swb_s2 <= pos_calc_ky_val_swb_s1;
      if ((pos_calc_ky_val_swb_s2 = '0') and (pos_calc_ky_val_swb_s1 = '1')) then
        pos_calc_ky_val_o <= pos_calc_ky_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- BPM sensitivity (Sum) parameter register
  -- asynchronous std_logic_vector register : BPM sensitivity (Sum) parameter register (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ksum_val_swb_s0 <= '0';
      pos_calc_ksum_val_swb_s1 <= '0';
      pos_calc_ksum_val_swb_s2 <= '0';
      pos_calc_ksum_val_o <= "0000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ksum_val_swb_s0 <= pos_calc_ksum_val_swb;
      pos_calc_ksum_val_swb_s1 <= pos_calc_ksum_val_swb_s0;
      pos_calc_ksum_val_swb_s2 <= pos_calc_ksum_val_swb_s1;
      if ((pos_calc_ksum_val_swb_s2 = '0') and (pos_calc_ksum_val_swb_s1 = '1')) then
        pos_calc_ksum_val_o <= pos_calc_ksum_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- TBT incorrect counter for channels 0/1 (multiplexed)
  -- asynchronous std_logic_vector register : TBT incorrect counter for channels 0/1 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s0 <= pos_calc_dsp_ctnr_tbt_ch01_lwb;
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s1 <= pos_calc_dsp_ctnr_tbt_ch01_lwb_s0;
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s2 <= pos_calc_dsp_ctnr_tbt_ch01_lwb_s1;
      if ((pos_calc_dsp_ctnr_tbt_ch01_lwb_s1 = '1') and (pos_calc_dsp_ctnr_tbt_ch01_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_tbt_ch01_int <= pos_calc_dsp_ctnr_tbt_ch01_i;
      end if;
    end if;
  end process;


  -- TBT incorrect counter for channels 2/3 (multiplexed)
  -- asynchronous std_logic_vector register : TBT incorrect counter for channels 2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s0 <= pos_calc_dsp_ctnr_tbt_ch23_lwb;
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s1 <= pos_calc_dsp_ctnr_tbt_ch23_lwb_s0;
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s2 <= pos_calc_dsp_ctnr_tbt_ch23_lwb_s1;
      if ((pos_calc_dsp_ctnr_tbt_ch23_lwb_s1 = '1') and (pos_calc_dsp_ctnr_tbt_ch23_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_tbt_ch23_int <= pos_calc_dsp_ctnr_tbt_ch23_i;
      end if;
    end if;
  end process;


  -- FOFB incorrect counter for channels 0/1 (multiplexed)
  -- asynchronous std_logic_vector register : FOFB incorrect counter for channels 0/1 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s0 <= pos_calc_dsp_ctnr_fofb_ch01_lwb;
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s1 <= pos_calc_dsp_ctnr_fofb_ch01_lwb_s0;
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s2 <= pos_calc_dsp_ctnr_fofb_ch01_lwb_s1;
      if ((pos_calc_dsp_ctnr_fofb_ch01_lwb_s1 = '1') and (pos_calc_dsp_ctnr_fofb_ch01_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_fofb_ch01_int <= pos_calc_dsp_ctnr_fofb_ch01_i;
      end if;
    end if;
  end process;


  -- FOFB incorrect counter for channels 2/3 (multiplexed)
  -- asynchronous std_logic_vector register : FOFB incorrect counter for channels 2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s0 <= pos_calc_dsp_ctnr_fofb_ch23_lwb;
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s1 <= pos_calc_dsp_ctnr_fofb_ch23_lwb_s0;
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s2 <= pos_calc_dsp_ctnr_fofb_ch23_lwb_s1;
      if ((pos_calc_dsp_ctnr_fofb_ch23_lwb_s1 = '1') and (pos_calc_dsp_ctnr_fofb_ch23_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_fofb_ch23_int <= pos_calc_dsp_ctnr_fofb_ch23_i;
      end if;
    end if;
  end process;


  -- Monit. CIC incorrect counter for channels 0/1/2/3 (multiplexed)
  -- asynchronous std_logic_vector register : Monit. CIC incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr1_monit_cic_lwb_s0 <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_s1 <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_s2 <= '0';
      pos_calc_dsp_ctnr1_monit_cic_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr1_monit_cic_lwb_s0 <= pos_calc_dsp_ctnr1_monit_cic_lwb;
      pos_calc_dsp_ctnr1_monit_cic_lwb_s1 <= pos_calc_dsp_ctnr1_monit_cic_lwb_s0;
      pos_calc_dsp_ctnr1_monit_cic_lwb_s2 <= pos_calc_dsp_ctnr1_monit_cic_lwb_s1;
      if ((pos_calc_dsp_ctnr1_monit_cic_lwb_s1 = '1') and (pos_calc_dsp_ctnr1_monit_cic_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr1_monit_cic_int <= pos_calc_dsp_ctnr1_monit_cic_i;
      end if;
    end if;
  end process;


  -- Monit. CFIR incorrect counter for channels 0/1/2/3 (multiplexed)
  -- asynchronous std_logic_vector register : Monit. CFIR incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s0 <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s1 <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s2 <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s0 <= pos_calc_dsp_ctnr1_monit_cfir_lwb;
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s1 <= pos_calc_dsp_ctnr1_monit_cfir_lwb_s0;
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s2 <= pos_calc_dsp_ctnr1_monit_cfir_lwb_s1;
      if ((pos_calc_dsp_ctnr1_monit_cfir_lwb_s1 = '1') and (pos_calc_dsp_ctnr1_monit_cfir_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr1_monit_cfir_int <= pos_calc_dsp_ctnr1_monit_cfir_i;
      end if;
    end if;
  end process;


  -- Monit. PFIR incorrect counter for channels 0/1/2/3 (multiplexed)
  -- asynchronous std_logic_vector register : Monit. PFIR incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s0 <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s1 <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s2 <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s0 <= pos_calc_dsp_ctnr2_monit_pfir_lwb;
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s1 <= pos_calc_dsp_ctnr2_monit_pfir_lwb_s0;
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s2 <= pos_calc_dsp_ctnr2_monit_pfir_lwb_s1;
      if ((pos_calc_dsp_ctnr2_monit_pfir_lwb_s1 = '1') and (pos_calc_dsp_ctnr2_monit_pfir_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr2_monit_pfir_int <= pos_calc_dsp_ctnr2_monit_pfir_i;
      end if;
    end if;
  end process;


  -- Monit. 0.1 Hz incorrect counter for channels 0/1/2/3 (multiplexed)
  -- asynchronous std_logic_vector register : Monit. 0.1 Hz incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0 <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1 <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2 <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0 <= pos_calc_dsp_ctnr2_monit_fir_01_lwb;
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1 <= pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0;
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2 <= pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1;
      if ((pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1 = '1') and (pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr2_monit_fir_01_int <= pos_calc_dsp_ctnr2_monit_fir_01_i;
      end if;
    end if;
  end process;


  -- Clear TBT error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_err_clr_tbt_o <= '0';
      pos_calc_dsp_err_clr_tbt_sync0 <= '0';
      pos_calc_dsp_err_clr_tbt_sync1 <= '0';
      pos_calc_dsp_err_clr_tbt_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_tbt_sync0 <= pos_calc_dsp_err_clr_tbt_int;
      pos_calc_dsp_err_clr_tbt_sync1 <= pos_calc_dsp_err_clr_tbt_sync0;
      pos_calc_dsp_err_clr_tbt_sync2 <= pos_calc_dsp_err_clr_tbt_sync1;
      pos_calc_dsp_err_clr_tbt_o <= pos_calc_dsp_err_clr_tbt_sync2 and (not pos_calc_dsp_err_clr_tbt_sync1);
    end if;
  end process;


  -- Clear FOFB error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_err_clr_fofb_o <= '0';
      pos_calc_dsp_err_clr_fofb_sync0 <= '0';
      pos_calc_dsp_err_clr_fofb_sync1 <= '0';
      pos_calc_dsp_err_clr_fofb_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_fofb_sync0 <= pos_calc_dsp_err_clr_fofb_int;
      pos_calc_dsp_err_clr_fofb_sync1 <= pos_calc_dsp_err_clr_fofb_sync0;
      pos_calc_dsp_err_clr_fofb_sync2 <= pos_calc_dsp_err_clr_fofb_sync1;
      pos_calc_dsp_err_clr_fofb_o <= pos_calc_dsp_err_clr_fofb_sync2 and (not pos_calc_dsp_err_clr_fofb_sync1);
    end if;
  end process;


  -- Clear Monit. CIC and CFIR error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_err_clr_monit_part1_o <= '0';
      pos_calc_dsp_err_clr_monit_part1_sync0 <= '0';
      pos_calc_dsp_err_clr_monit_part1_sync1 <= '0';
      pos_calc_dsp_err_clr_monit_part1_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_monit_part1_sync0 <= pos_calc_dsp_err_clr_monit_part1_int;
      pos_calc_dsp_err_clr_monit_part1_sync1 <= pos_calc_dsp_err_clr_monit_part1_sync0;
      pos_calc_dsp_err_clr_monit_part1_sync2 <= pos_calc_dsp_err_clr_monit_part1_sync1;
      pos_calc_dsp_err_clr_monit_part1_o <= pos_calc_dsp_err_clr_monit_part1_sync2 and (not pos_calc_dsp_err_clr_monit_part1_sync1);
    end if;
  end process;


  -- Clear Monit. PFIR and Monit. 0.1 error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_err_clr_monit_part2_o <= '0';
      pos_calc_dsp_err_clr_monit_part2_sync0 <= '0';
      pos_calc_dsp_err_clr_monit_part2_sync1 <= '0';
      pos_calc_dsp_err_clr_monit_part2_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_monit_part2_sync0 <= pos_calc_dsp_err_clr_monit_part2_int;
      pos_calc_dsp_err_clr_monit_part2_sync1 <= pos_calc_dsp_err_clr_monit_part2_sync0;
      pos_calc_dsp_err_clr_monit_part2_sync2 <= pos_calc_dsp_err_clr_monit_part2_sync1;
      pos_calc_dsp_err_clr_monit_part2_o <= pos_calc_dsp_err_clr_monit_part2_sync2 and (not pos_calc_dsp_err_clr_monit_part2_sync1);
    end if;
  end process;


  -- Valid signal for channel 0 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_cfg_valid_ch0_o <= '0';
      pos_calc_dds_cfg_valid_ch0_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch0_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch0_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch0_sync0 <= pos_calc_dds_cfg_valid_ch0_int;
      pos_calc_dds_cfg_valid_ch0_sync1 <= pos_calc_dds_cfg_valid_ch0_sync0;
      pos_calc_dds_cfg_valid_ch0_sync2 <= pos_calc_dds_cfg_valid_ch0_sync1;
      pos_calc_dds_cfg_valid_ch0_o <= pos_calc_dds_cfg_valid_ch0_sync2 and (not pos_calc_dds_cfg_valid_ch0_sync1);
    end if;
  end process;


  -- Test data counter for all channels
  -- synchronizer chain for field : Test data counter for all channels (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_cfg_test_data_o <= '0';
      pos_calc_dds_cfg_test_data_sync0 <= '0';
      pos_calc_dds_cfg_test_data_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_test_data_sync0 <= pos_calc_dds_cfg_test_data_int;
      pos_calc_dds_cfg_test_data_sync1 <= pos_calc_dds_cfg_test_data_sync0;
      pos_calc_dds_cfg_test_data_o <= pos_calc_dds_cfg_test_data_sync1;
    end if;
  end process;


  -- Reserved
  -- Valid signal for channel 1 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_cfg_valid_ch1_o <= '0';
      pos_calc_dds_cfg_valid_ch1_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch1_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch1_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch1_sync0 <= pos_calc_dds_cfg_valid_ch1_int;
      pos_calc_dds_cfg_valid_ch1_sync1 <= pos_calc_dds_cfg_valid_ch1_sync0;
      pos_calc_dds_cfg_valid_ch1_sync2 <= pos_calc_dds_cfg_valid_ch1_sync1;
      pos_calc_dds_cfg_valid_ch1_o <= pos_calc_dds_cfg_valid_ch1_sync2 and (not pos_calc_dds_cfg_valid_ch1_sync1);
    end if;
  end process;


  -- Reserved
  -- Valid signal for channel 2 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_cfg_valid_ch2_o <= '0';
      pos_calc_dds_cfg_valid_ch2_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch2_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch2_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch2_sync0 <= pos_calc_dds_cfg_valid_ch2_int;
      pos_calc_dds_cfg_valid_ch2_sync1 <= pos_calc_dds_cfg_valid_ch2_sync0;
      pos_calc_dds_cfg_valid_ch2_sync2 <= pos_calc_dds_cfg_valid_ch2_sync1;
      pos_calc_dds_cfg_valid_ch2_o <= pos_calc_dds_cfg_valid_ch2_sync2 and (not pos_calc_dds_cfg_valid_ch2_sync1);
    end if;
  end process;


  -- Reserved
  -- Valid signal for channel 3 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_cfg_valid_ch3_o <= '0';
      pos_calc_dds_cfg_valid_ch3_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch3_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch3_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch3_sync0 <= pos_calc_dds_cfg_valid_ch3_int;
      pos_calc_dds_cfg_valid_ch3_sync1 <= pos_calc_dds_cfg_valid_ch3_sync0;
      pos_calc_dds_cfg_valid_ch3_sync2 <= pos_calc_dds_cfg_valid_ch3_sync1;
      pos_calc_dds_cfg_valid_ch3_o <= pos_calc_dds_cfg_valid_ch3_sync2 and (not pos_calc_dds_cfg_valid_ch3_sync1);
    end if;
  end process;


  -- Reserved
  -- DDS phase increment parameter register for channel 0
  -- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 0 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_pinc_ch0_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch0_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch0_val_swb_s2 <= '0';
      pos_calc_dds_pinc_ch0_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch0_val_swb_s0 <= pos_calc_dds_pinc_ch0_val_swb;
      pos_calc_dds_pinc_ch0_val_swb_s1 <= pos_calc_dds_pinc_ch0_val_swb_s0;
      pos_calc_dds_pinc_ch0_val_swb_s2 <= pos_calc_dds_pinc_ch0_val_swb_s1;
      if ((pos_calc_dds_pinc_ch0_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch0_val_swb_s1 = '1')) then
        pos_calc_dds_pinc_ch0_val_o <= pos_calc_dds_pinc_ch0_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- DDS phase increment parameter register for channel 1
  -- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 1 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_pinc_ch1_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch1_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch1_val_swb_s2 <= '0';
      pos_calc_dds_pinc_ch1_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch1_val_swb_s0 <= pos_calc_dds_pinc_ch1_val_swb;
      pos_calc_dds_pinc_ch1_val_swb_s1 <= pos_calc_dds_pinc_ch1_val_swb_s0;
      pos_calc_dds_pinc_ch1_val_swb_s2 <= pos_calc_dds_pinc_ch1_val_swb_s1;
      if ((pos_calc_dds_pinc_ch1_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch1_val_swb_s1 = '1')) then
        pos_calc_dds_pinc_ch1_val_o <= pos_calc_dds_pinc_ch1_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- DDS phase increment parameter register for channel 2
  -- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 2 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_pinc_ch2_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch2_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch2_val_swb_s2 <= '0';
      pos_calc_dds_pinc_ch2_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch2_val_swb_s0 <= pos_calc_dds_pinc_ch2_val_swb;
      pos_calc_dds_pinc_ch2_val_swb_s1 <= pos_calc_dds_pinc_ch2_val_swb_s0;
      pos_calc_dds_pinc_ch2_val_swb_s2 <= pos_calc_dds_pinc_ch2_val_swb_s1;
      if ((pos_calc_dds_pinc_ch2_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch2_val_swb_s1 = '1')) then
        pos_calc_dds_pinc_ch2_val_o <= pos_calc_dds_pinc_ch2_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- DDS phase increment parameter register for channel 3
  -- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 3 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_pinc_ch3_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch3_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch3_val_swb_s2 <= '0';
      pos_calc_dds_pinc_ch3_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch3_val_swb_s0 <= pos_calc_dds_pinc_ch3_val_swb;
      pos_calc_dds_pinc_ch3_val_swb_s1 <= pos_calc_dds_pinc_ch3_val_swb_s0;
      pos_calc_dds_pinc_ch3_val_swb_s2 <= pos_calc_dds_pinc_ch3_val_swb_s1;
      if ((pos_calc_dds_pinc_ch3_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch3_val_swb_s1 = '1')) then
        pos_calc_dds_pinc_ch3_val_o <= pos_calc_dds_pinc_ch3_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- DDS phase offset parameter register for channel 0
  -- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 0 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_poff_ch0_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch0_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch0_val_swb_s2 <= '0';
      pos_calc_dds_poff_ch0_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch0_val_swb_s0 <= pos_calc_dds_poff_ch0_val_swb;
      pos_calc_dds_poff_ch0_val_swb_s1 <= pos_calc_dds_poff_ch0_val_swb_s0;
      pos_calc_dds_poff_ch0_val_swb_s2 <= pos_calc_dds_poff_ch0_val_swb_s1;
      if ((pos_calc_dds_poff_ch0_val_swb_s2 = '0') and (pos_calc_dds_poff_ch0_val_swb_s1 = '1')) then
        pos_calc_dds_poff_ch0_val_o <= pos_calc_dds_poff_ch0_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- DDS phase offset parameter register for channel 1
  -- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 1 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_poff_ch1_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch1_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch1_val_swb_s2 <= '0';
      pos_calc_dds_poff_ch1_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch1_val_swb_s0 <= pos_calc_dds_poff_ch1_val_swb;
      pos_calc_dds_poff_ch1_val_swb_s1 <= pos_calc_dds_poff_ch1_val_swb_s0;
      pos_calc_dds_poff_ch1_val_swb_s2 <= pos_calc_dds_poff_ch1_val_swb_s1;
      if ((pos_calc_dds_poff_ch1_val_swb_s2 = '0') and (pos_calc_dds_poff_ch1_val_swb_s1 = '1')) then
        pos_calc_dds_poff_ch1_val_o <= pos_calc_dds_poff_ch1_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- DDS phase offset parameter register for channel 2
  -- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 2 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_poff_ch2_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch2_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch2_val_swb_s2 <= '0';
      pos_calc_dds_poff_ch2_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch2_val_swb_s0 <= pos_calc_dds_poff_ch2_val_swb;
      pos_calc_dds_poff_ch2_val_swb_s1 <= pos_calc_dds_poff_ch2_val_swb_s0;
      pos_calc_dds_poff_ch2_val_swb_s2 <= pos_calc_dds_poff_ch2_val_swb_s1;
      if ((pos_calc_dds_poff_ch2_val_swb_s2 = '0') and (pos_calc_dds_poff_ch2_val_swb_s1 = '1')) then
        pos_calc_dds_poff_ch2_val_o <= pos_calc_dds_poff_ch2_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- DDS phase offset parameter register for channel 3
  -- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 3 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_poff_ch3_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch3_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch3_val_swb_s2 <= '0';
      pos_calc_dds_poff_ch3_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch3_val_swb_s0 <= pos_calc_dds_poff_ch3_val_swb;
      pos_calc_dds_poff_ch3_val_swb_s1 <= pos_calc_dds_poff_ch3_val_swb_s0;
      pos_calc_dds_poff_ch3_val_swb_s2 <= pos_calc_dds_poff_ch3_val_swb_s1;
      if ((pos_calc_dds_poff_ch3_val_swb_s2 = '0') and (pos_calc_dds_poff_ch3_val_swb_s1 = '1')) then
        pos_calc_dds_poff_ch3_val_o <= pos_calc_dds_poff_ch3_val_int;
      end if;
    end if;
  end process;


  -- Reserved
  -- Monit. Amplitude Value for channel 0
  -- Monit. Amplitude Value for channel 1
  -- Monit. Amplitude Value for channel 2
  -- Monit. Amplitude Value for channel 3
  -- Monit. X Position Value
  -- Monit. Y Position Value
  -- Monit. Q Position Value
  -- Monit. Sum Position Value
  -- Monit. Amp/Pos Update (ignore on read)
  -- pass-through field: Monit. Amp/Pos Update (ignore on read) in register: Monit. Amp/Pos update trigger
  pos_calc_dsp_monit_updt_o <= wrdata_reg(31 downto 0);
  -- Monit. 1 Amplitude Value for channel 0
  -- Monit. 1 Amplitude Value for channel 1
  -- Monit. 1 Amplitude Value for channel 2
  -- Monit. 1 Amplitude Value for channel 3
  -- Monit. 1 X Position Value
  -- Monit. 1 Y Position Value
  -- Monit. 1 Q Position Value
  -- Monit. 1 Sum Position Value
  -- Monit. 1 Amp/Pos Update (ignore on read)
  -- pass-through field: Monit. 1 Amp/Pos Update (ignore on read) in register: Monit. 1 Amp/Pos update trigger
  pos_calc_dsp_monit1_updt_o <= wrdata_reg(31 downto 0);
  -- extra code for reg/fifo/mem: AMP FIFO Monitoring
  pos_calc_ampfifo_monit_in_int(31 downto 0) <= pos_calc_ampfifo_monit_amp_ch0_i;
  pos_calc_ampfifo_monit_in_int(63 downto 32) <= pos_calc_ampfifo_monit_amp_ch1_i;
  pos_calc_ampfifo_monit_in_int(95 downto 64) <= pos_calc_ampfifo_monit_amp_ch2_i;
  pos_calc_ampfifo_monit_in_int(127 downto 96) <= pos_calc_ampfifo_monit_amp_ch3_i;
  pos_calc_ampfifo_monit_rst_n <= rst_n_i;
  pos_calc_ampfifo_monit_INST: wbgen2_fifo_sync
    generic map (
      g_size               => 16,
      g_width              => 128,
      g_usedw_size         => 4
    )
    port map (
      wr_req_i             => pos_calc_ampfifo_monit_wr_req_i,
      wr_full_o            => pos_calc_ampfifo_monit_wr_full_o,
      wr_empty_o           => pos_calc_ampfifo_monit_wr_empty_o,
      wr_usedw_o           => pos_calc_ampfifo_monit_wr_usedw_o,
      rd_full_o            => pos_calc_ampfifo_monit_full_int,
      rd_empty_o           => pos_calc_ampfifo_monit_empty_int,
      rd_usedw_o           => pos_calc_ampfifo_monit_usedw_int,
      rd_req_i             => pos_calc_ampfifo_monit_rdreq_int,
      rst_n_i              => pos_calc_ampfifo_monit_rst_n,
      clk_i                => clk_sys_i,
      wr_data_i            => pos_calc_ampfifo_monit_in_int,
      rd_data_o            => pos_calc_ampfifo_monit_out_int
    );
  
  -- extra code for reg/fifo/mem: POS FIFO Monitoring
  pos_calc_posfifo_monit_in_int(31 downto 0) <= pos_calc_posfifo_monit_pos_x_i;
  pos_calc_posfifo_monit_in_int(63 downto 32) <= pos_calc_posfifo_monit_pos_y_i;
  pos_calc_posfifo_monit_in_int(95 downto 64) <= pos_calc_posfifo_monit_pos_q_i;
  pos_calc_posfifo_monit_in_int(127 downto 96) <= pos_calc_posfifo_monit_pos_sum_i;
  pos_calc_posfifo_monit_rst_n <= rst_n_i;
  pos_calc_posfifo_monit_INST: wbgen2_fifo_sync
    generic map (
      g_size               => 16,
      g_width              => 128,
      g_usedw_size         => 4
    )
    port map (
      wr_req_i             => pos_calc_posfifo_monit_wr_req_i,
      wr_full_o            => pos_calc_posfifo_monit_wr_full_o,
      wr_empty_o           => pos_calc_posfifo_monit_wr_empty_o,
      wr_usedw_o           => pos_calc_posfifo_monit_wr_usedw_o,
      rd_full_o            => pos_calc_posfifo_monit_full_int,
      rd_empty_o           => pos_calc_posfifo_monit_empty_int,
      rd_usedw_o           => pos_calc_posfifo_monit_usedw_int,
      rd_req_i             => pos_calc_posfifo_monit_rdreq_int,
      rst_n_i              => pos_calc_posfifo_monit_rst_n,
      clk_i                => clk_sys_i,
      wr_data_i            => pos_calc_posfifo_monit_in_int,
      rd_data_o            => pos_calc_posfifo_monit_out_int
    );
  
  -- extra code for reg/fifo/mem: AMP FIFO Monitoring 1
  pos_calc_ampfifo_monit1_in_int(31 downto 0) <= pos_calc_ampfifo_monit1_amp_ch0_i;
  pos_calc_ampfifo_monit1_in_int(63 downto 32) <= pos_calc_ampfifo_monit1_amp_ch1_i;
  pos_calc_ampfifo_monit1_in_int(95 downto 64) <= pos_calc_ampfifo_monit1_amp_ch2_i;
  pos_calc_ampfifo_monit1_in_int(127 downto 96) <= pos_calc_ampfifo_monit1_amp_ch3_i;
  pos_calc_ampfifo_monit1_rst_n <= rst_n_i;
  pos_calc_ampfifo_monit1_INST: wbgen2_fifo_sync
    generic map (
      g_size               => 16,
      g_width              => 128,
      g_usedw_size         => 4
    )
    port map (
      wr_req_i             => pos_calc_ampfifo_monit1_wr_req_i,
      wr_full_o            => pos_calc_ampfifo_monit1_wr_full_o,
      wr_empty_o           => pos_calc_ampfifo_monit1_wr_empty_o,
      wr_usedw_o           => pos_calc_ampfifo_monit1_wr_usedw_o,
      rd_full_o            => pos_calc_ampfifo_monit1_full_int,
      rd_empty_o           => pos_calc_ampfifo_monit1_empty_int,
      rd_usedw_o           => pos_calc_ampfifo_monit1_usedw_int,
      rd_req_i             => pos_calc_ampfifo_monit1_rdreq_int,
      rst_n_i              => pos_calc_ampfifo_monit1_rst_n,
      clk_i                => clk_sys_i,
      wr_data_i            => pos_calc_ampfifo_monit1_in_int,
      rd_data_o            => pos_calc_ampfifo_monit1_out_int
    );
  
  -- extra code for reg/fifo/mem: POS FIFO Monitoring 1
  pos_calc_posfifo_monit1_in_int(31 downto 0) <= pos_calc_posfifo_monit1_pos_x_i;
  pos_calc_posfifo_monit1_in_int(63 downto 32) <= pos_calc_posfifo_monit1_pos_y_i;
  pos_calc_posfifo_monit1_in_int(95 downto 64) <= pos_calc_posfifo_monit1_pos_q_i;
  pos_calc_posfifo_monit1_in_int(127 downto 96) <= pos_calc_posfifo_monit1_pos_sum_i;
  pos_calc_posfifo_monit1_rst_n <= rst_n_i;
  pos_calc_posfifo_monit1_INST: wbgen2_fifo_sync
    generic map (
      g_size               => 16,
      g_width              => 128,
      g_usedw_size         => 4
    )
    port map (
      wr_req_i             => pos_calc_posfifo_monit1_wr_req_i,
      wr_full_o            => pos_calc_posfifo_monit1_wr_full_o,
      wr_empty_o           => pos_calc_posfifo_monit1_wr_empty_o,
      wr_usedw_o           => pos_calc_posfifo_monit1_wr_usedw_o,
      rd_full_o            => pos_calc_posfifo_monit1_full_int,
      rd_empty_o           => pos_calc_posfifo_monit1_empty_int,
      rd_usedw_o           => pos_calc_posfifo_monit1_usedw_int,
      rd_req_i             => pos_calc_posfifo_monit1_rdreq_int,
      rst_n_i              => pos_calc_posfifo_monit1_rst_n,
      clk_i                => clk_sys_i,
      wr_data_i            => pos_calc_posfifo_monit1_in_int,
      rd_data_o            => pos_calc_posfifo_monit1_out_int
    );
  
  -- Tag Synchronization Enable
  -- synchronizer chain for field : Tag Synchronization Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_sw_tag_en_o <= '0';
      pos_calc_sw_tag_en_sync0 <= '0';
      pos_calc_sw_tag_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_sw_tag_en_sync0 <= pos_calc_sw_tag_en_int;
      pos_calc_sw_tag_en_sync1 <= pos_calc_sw_tag_en_sync0;
      pos_calc_sw_tag_en_o <= pos_calc_sw_tag_en_sync1;
    end if;
  end process;


  -- Switching Desynchronization Counter Reset
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_sw_tag_desync_cnt_rst_o <= '0';
      pos_calc_sw_tag_desync_cnt_rst_sync0 <= '0';
      pos_calc_sw_tag_desync_cnt_rst_sync1 <= '0';
      pos_calc_sw_tag_desync_cnt_rst_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_sw_tag_desync_cnt_rst_sync0 <= pos_calc_sw_tag_desync_cnt_rst_int;
      pos_calc_sw_tag_desync_cnt_rst_sync1 <= pos_calc_sw_tag_desync_cnt_rst_sync0;
      pos_calc_sw_tag_desync_cnt_rst_sync2 <= pos_calc_sw_tag_desync_cnt_rst_sync1;
      pos_calc_sw_tag_desync_cnt_rst_o <= pos_calc_sw_tag_desync_cnt_rst_sync2 and (not pos_calc_sw_tag_desync_cnt_rst_sync1);
    end if;
  end process;


  -- Switching Desynchronization Counter
  -- asynchronous std_logic_vector register : Switching Desynchronization Counter (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_sw_tag_desync_cnt_lwb_s0 <= '0';
      pos_calc_sw_tag_desync_cnt_lwb_s1 <= '0';
      pos_calc_sw_tag_desync_cnt_lwb_s2 <= '0';
      pos_calc_sw_tag_desync_cnt_int <= "00000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_sw_tag_desync_cnt_lwb_s0 <= pos_calc_sw_tag_desync_cnt_lwb;
      pos_calc_sw_tag_desync_cnt_lwb_s1 <= pos_calc_sw_tag_desync_cnt_lwb_s0;
      pos_calc_sw_tag_desync_cnt_lwb_s2 <= pos_calc_sw_tag_desync_cnt_lwb_s1;
      if ((pos_calc_sw_tag_desync_cnt_lwb_s1 = '1') and (pos_calc_sw_tag_desync_cnt_lwb_s2 = '0')) then
        pos_calc_sw_tag_desync_cnt_int <= pos_calc_sw_tag_desync_cnt_i;
      end if;
    end if;
  end process;


  -- Switching Data Mask Enable
  -- synchronizer chain for field : Switching Data Mask Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_sw_data_mask_en_o <= '0';
      pos_calc_sw_data_mask_en_sync0 <= '0';
      pos_calc_sw_data_mask_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_sw_data_mask_en_sync0 <= pos_calc_sw_data_mask_en_int;
      pos_calc_sw_data_mask_en_sync1 <= pos_calc_sw_data_mask_en_sync0;
      pos_calc_sw_data_mask_en_o <= pos_calc_sw_data_mask_en_sync1;
    end if;
  end process;


  -- Switching Data Mask Samples
  -- asynchronous std_logic_vector register : Switching Data Mask Samples (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_sw_data_mask_samples_swb_s0 <= '0';
      pos_calc_sw_data_mask_samples_swb_s1 <= '0';
      pos_calc_sw_data_mask_samples_swb_s2 <= '0';
      pos_calc_sw_data_mask_samples_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_sw_data_mask_samples_swb_s0 <= pos_calc_sw_data_mask_samples_swb;
      pos_calc_sw_data_mask_samples_swb_s1 <= pos_calc_sw_data_mask_samples_swb_s0;
      pos_calc_sw_data_mask_samples_swb_s2 <= pos_calc_sw_data_mask_samples_swb_s1;
      if ((pos_calc_sw_data_mask_samples_swb_s2 = '0') and (pos_calc_sw_data_mask_samples_swb_s1 = '1')) then
        pos_calc_sw_data_mask_samples_o <= pos_calc_sw_data_mask_samples_int;
      end if;
    end if;
  end process;


  -- TbT Synchronizing Trigger Enable
  -- synchronizer chain for field : TbT Synchronizing Trigger Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_tag_en_o <= '0';
      pos_calc_tbt_tag_en_sync0 <= '0';
      pos_calc_tbt_tag_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_tag_en_sync0 <= pos_calc_tbt_tag_en_int;
      pos_calc_tbt_tag_en_sync1 <= pos_calc_tbt_tag_en_sync0;
      pos_calc_tbt_tag_en_o <= pos_calc_tbt_tag_en_sync1;
    end if;
  end process;


  -- TbT Synchronizing Trigger Delay
  -- asynchronous std_logic_vector register : TbT Synchronizing Trigger Delay (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_tag_dly_swb_s0 <= '0';
      pos_calc_tbt_tag_dly_swb_s1 <= '0';
      pos_calc_tbt_tag_dly_swb_s2 <= '0';
      pos_calc_tbt_tag_dly_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_tag_dly_swb_s0 <= pos_calc_tbt_tag_dly_swb;
      pos_calc_tbt_tag_dly_swb_s1 <= pos_calc_tbt_tag_dly_swb_s0;
      pos_calc_tbt_tag_dly_swb_s2 <= pos_calc_tbt_tag_dly_swb_s1;
      if ((pos_calc_tbt_tag_dly_swb_s2 = '0') and (pos_calc_tbt_tag_dly_swb_s1 = '1')) then
        pos_calc_tbt_tag_dly_o <= pos_calc_tbt_tag_dly_int;
      end if;
    end if;
  end process;


  -- TbT Desynchronization Counter Reset
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_tag_desync_cnt_rst_o <= '0';
      pos_calc_tbt_tag_desync_cnt_rst_sync0 <= '0';
      pos_calc_tbt_tag_desync_cnt_rst_sync1 <= '0';
      pos_calc_tbt_tag_desync_cnt_rst_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_tag_desync_cnt_rst_sync0 <= pos_calc_tbt_tag_desync_cnt_rst_int;
      pos_calc_tbt_tag_desync_cnt_rst_sync1 <= pos_calc_tbt_tag_desync_cnt_rst_sync0;
      pos_calc_tbt_tag_desync_cnt_rst_sync2 <= pos_calc_tbt_tag_desync_cnt_rst_sync1;
      pos_calc_tbt_tag_desync_cnt_rst_o <= pos_calc_tbt_tag_desync_cnt_rst_sync2 and (not pos_calc_tbt_tag_desync_cnt_rst_sync1);
    end if;
  end process;


  -- TbT Desynchronization Counter
  -- asynchronous std_logic_vector register : TbT Desynchronization Counter (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_tag_desync_cnt_lwb_s0 <= '0';
      pos_calc_tbt_tag_desync_cnt_lwb_s1 <= '0';
      pos_calc_tbt_tag_desync_cnt_lwb_s2 <= '0';
      pos_calc_tbt_tag_desync_cnt_int <= "00000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_tag_desync_cnt_lwb_s0 <= pos_calc_tbt_tag_desync_cnt_lwb;
      pos_calc_tbt_tag_desync_cnt_lwb_s1 <= pos_calc_tbt_tag_desync_cnt_lwb_s0;
      pos_calc_tbt_tag_desync_cnt_lwb_s2 <= pos_calc_tbt_tag_desync_cnt_lwb_s1;
      if ((pos_calc_tbt_tag_desync_cnt_lwb_s1 = '1') and (pos_calc_tbt_tag_desync_cnt_lwb_s2 = '0')) then
        pos_calc_tbt_tag_desync_cnt_int <= pos_calc_tbt_tag_desync_cnt_i;
      end if;
    end if;
  end process;


  -- TbT Masking Enable
  -- synchronizer chain for field : TbT Masking Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_data_mask_ctl_en_o <= '0';
      pos_calc_tbt_data_mask_ctl_en_sync0 <= '0';
      pos_calc_tbt_data_mask_ctl_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_data_mask_ctl_en_sync0 <= pos_calc_tbt_data_mask_ctl_en_int;
      pos_calc_tbt_data_mask_ctl_en_sync1 <= pos_calc_tbt_data_mask_ctl_en_sync0;
      pos_calc_tbt_data_mask_ctl_en_o <= pos_calc_tbt_data_mask_ctl_en_sync1;
    end if;
  end process;


  -- TbT Beginning Data Masking Samples
  -- asynchronous std_logic_vector register : TbT Beginning Data Masking Samples (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_data_mask_samples_beg_swb_s0 <= '0';
      pos_calc_tbt_data_mask_samples_beg_swb_s1 <= '0';
      pos_calc_tbt_data_mask_samples_beg_swb_s2 <= '0';
      pos_calc_tbt_data_mask_samples_beg_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_data_mask_samples_beg_swb_s0 <= pos_calc_tbt_data_mask_samples_beg_swb;
      pos_calc_tbt_data_mask_samples_beg_swb_s1 <= pos_calc_tbt_data_mask_samples_beg_swb_s0;
      pos_calc_tbt_data_mask_samples_beg_swb_s2 <= pos_calc_tbt_data_mask_samples_beg_swb_s1;
      if ((pos_calc_tbt_data_mask_samples_beg_swb_s2 = '0') and (pos_calc_tbt_data_mask_samples_beg_swb_s1 = '1')) then
        pos_calc_tbt_data_mask_samples_beg_o <= pos_calc_tbt_data_mask_samples_beg_int;
      end if;
    end if;
  end process;


  -- TbT Beginning Data Masking Samples
  -- asynchronous std_logic_vector register : TbT Beginning Data Masking Samples (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_data_mask_samples_end_swb_s0 <= '0';
      pos_calc_tbt_data_mask_samples_end_swb_s1 <= '0';
      pos_calc_tbt_data_mask_samples_end_swb_s2 <= '0';
      pos_calc_tbt_data_mask_samples_end_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_data_mask_samples_end_swb_s0 <= pos_calc_tbt_data_mask_samples_end_swb;
      pos_calc_tbt_data_mask_samples_end_swb_s1 <= pos_calc_tbt_data_mask_samples_end_swb_s0;
      pos_calc_tbt_data_mask_samples_end_swb_s2 <= pos_calc_tbt_data_mask_samples_end_swb_s1;
      if ((pos_calc_tbt_data_mask_samples_end_swb_s2 = '0') and (pos_calc_tbt_data_mask_samples_end_swb_s1 = '1')) then
        pos_calc_tbt_data_mask_samples_end_o <= pos_calc_tbt_data_mask_samples_end_int;
      end if;
    end if;
  end process;


  -- MONIT1 Synchronizing Trigger Enable
  -- synchronizer chain for field : MONIT1 Synchronizing Trigger Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit1_tag_en_o <= '0';
      pos_calc_monit1_tag_en_sync0 <= '0';
      pos_calc_monit1_tag_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit1_tag_en_sync0 <= pos_calc_monit1_tag_en_int;
      pos_calc_monit1_tag_en_sync1 <= pos_calc_monit1_tag_en_sync0;
      pos_calc_monit1_tag_en_o <= pos_calc_monit1_tag_en_sync1;
    end if;
  end process;


  -- MONIT1 Synchronizing Trigger Delay
  -- asynchronous std_logic_vector register : MONIT1 Synchronizing Trigger Delay (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit1_tag_dly_swb_s0 <= '0';
      pos_calc_monit1_tag_dly_swb_s1 <= '0';
      pos_calc_monit1_tag_dly_swb_s2 <= '0';
      pos_calc_monit1_tag_dly_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit1_tag_dly_swb_s0 <= pos_calc_monit1_tag_dly_swb;
      pos_calc_monit1_tag_dly_swb_s1 <= pos_calc_monit1_tag_dly_swb_s0;
      pos_calc_monit1_tag_dly_swb_s2 <= pos_calc_monit1_tag_dly_swb_s1;
      if ((pos_calc_monit1_tag_dly_swb_s2 = '0') and (pos_calc_monit1_tag_dly_swb_s1 = '1')) then
        pos_calc_monit1_tag_dly_o <= pos_calc_monit1_tag_dly_int;
      end if;
    end if;
  end process;


  -- MONIT1 Desynchronization Counter Reset
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit1_tag_desync_cnt_rst_o <= '0';
      pos_calc_monit1_tag_desync_cnt_rst_sync0 <= '0';
      pos_calc_monit1_tag_desync_cnt_rst_sync1 <= '0';
      pos_calc_monit1_tag_desync_cnt_rst_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit1_tag_desync_cnt_rst_sync0 <= pos_calc_monit1_tag_desync_cnt_rst_int;
      pos_calc_monit1_tag_desync_cnt_rst_sync1 <= pos_calc_monit1_tag_desync_cnt_rst_sync0;
      pos_calc_monit1_tag_desync_cnt_rst_sync2 <= pos_calc_monit1_tag_desync_cnt_rst_sync1;
      pos_calc_monit1_tag_desync_cnt_rst_o <= pos_calc_monit1_tag_desync_cnt_rst_sync2 and (not pos_calc_monit1_tag_desync_cnt_rst_sync1);
    end if;
  end process;


  -- MONIT1 Desynchronization Counter
  -- asynchronous std_logic_vector register : MONIT1 Desynchronization Counter (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit1_tag_desync_cnt_lwb_s0 <= '0';
      pos_calc_monit1_tag_desync_cnt_lwb_s1 <= '0';
      pos_calc_monit1_tag_desync_cnt_lwb_s2 <= '0';
      pos_calc_monit1_tag_desync_cnt_int <= "00000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit1_tag_desync_cnt_lwb_s0 <= pos_calc_monit1_tag_desync_cnt_lwb;
      pos_calc_monit1_tag_desync_cnt_lwb_s1 <= pos_calc_monit1_tag_desync_cnt_lwb_s0;
      pos_calc_monit1_tag_desync_cnt_lwb_s2 <= pos_calc_monit1_tag_desync_cnt_lwb_s1;
      if ((pos_calc_monit1_tag_desync_cnt_lwb_s1 = '1') and (pos_calc_monit1_tag_desync_cnt_lwb_s2 = '0')) then
        pos_calc_monit1_tag_desync_cnt_int <= pos_calc_monit1_tag_desync_cnt_i;
      end if;
    end if;
  end process;


  -- MONIT1 Masking Enable
  -- synchronizer chain for field : MONIT1 Masking Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit1_data_mask_ctl_en_o <= '0';
      pos_calc_monit1_data_mask_ctl_en_sync0 <= '0';
      pos_calc_monit1_data_mask_ctl_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit1_data_mask_ctl_en_sync0 <= pos_calc_monit1_data_mask_ctl_en_int;
      pos_calc_monit1_data_mask_ctl_en_sync1 <= pos_calc_monit1_data_mask_ctl_en_sync0;
      pos_calc_monit1_data_mask_ctl_en_o <= pos_calc_monit1_data_mask_ctl_en_sync1;
    end if;
  end process;


  -- MONIT1 Beginning Data Masking Samples
  -- asynchronous std_logic_vector register : MONIT1 Beginning Data Masking Samples (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit1_data_mask_samples_beg_swb_s0 <= '0';
      pos_calc_monit1_data_mask_samples_beg_swb_s1 <= '0';
      pos_calc_monit1_data_mask_samples_beg_swb_s2 <= '0';
      pos_calc_monit1_data_mask_samples_beg_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit1_data_mask_samples_beg_swb_s0 <= pos_calc_monit1_data_mask_samples_beg_swb;
      pos_calc_monit1_data_mask_samples_beg_swb_s1 <= pos_calc_monit1_data_mask_samples_beg_swb_s0;
      pos_calc_monit1_data_mask_samples_beg_swb_s2 <= pos_calc_monit1_data_mask_samples_beg_swb_s1;
      if ((pos_calc_monit1_data_mask_samples_beg_swb_s2 = '0') and (pos_calc_monit1_data_mask_samples_beg_swb_s1 = '1')) then
        pos_calc_monit1_data_mask_samples_beg_o <= pos_calc_monit1_data_mask_samples_beg_int;
      end if;
    end if;
  end process;


  -- MONIT1 Beginning Data Masking Samples
  -- asynchronous std_logic_vector register : MONIT1 Beginning Data Masking Samples (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit1_data_mask_samples_end_swb_s0 <= '0';
      pos_calc_monit1_data_mask_samples_end_swb_s1 <= '0';
      pos_calc_monit1_data_mask_samples_end_swb_s2 <= '0';
      pos_calc_monit1_data_mask_samples_end_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit1_data_mask_samples_end_swb_s0 <= pos_calc_monit1_data_mask_samples_end_swb;
      pos_calc_monit1_data_mask_samples_end_swb_s1 <= pos_calc_monit1_data_mask_samples_end_swb_s0;
      pos_calc_monit1_data_mask_samples_end_swb_s2 <= pos_calc_monit1_data_mask_samples_end_swb_s1;
      if ((pos_calc_monit1_data_mask_samples_end_swb_s2 = '0') and (pos_calc_monit1_data_mask_samples_end_swb_s1 = '1')) then
        pos_calc_monit1_data_mask_samples_end_o <= pos_calc_monit1_data_mask_samples_end_int;
      end if;
    end if;
  end process;


  -- MONIT Synchronizing Trigger Enable
  -- synchronizer chain for field : MONIT Synchronizing Trigger Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit_tag_en_o <= '0';
      pos_calc_monit_tag_en_sync0 <= '0';
      pos_calc_monit_tag_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit_tag_en_sync0 <= pos_calc_monit_tag_en_int;
      pos_calc_monit_tag_en_sync1 <= pos_calc_monit_tag_en_sync0;
      pos_calc_monit_tag_en_o <= pos_calc_monit_tag_en_sync1;
    end if;
  end process;


  -- MONIT Synchronizing Trigger Delay
  -- asynchronous std_logic_vector register : MONIT Synchronizing Trigger Delay (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit_tag_dly_swb_s0 <= '0';
      pos_calc_monit_tag_dly_swb_s1 <= '0';
      pos_calc_monit_tag_dly_swb_s2 <= '0';
      pos_calc_monit_tag_dly_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit_tag_dly_swb_s0 <= pos_calc_monit_tag_dly_swb;
      pos_calc_monit_tag_dly_swb_s1 <= pos_calc_monit_tag_dly_swb_s0;
      pos_calc_monit_tag_dly_swb_s2 <= pos_calc_monit_tag_dly_swb_s1;
      if ((pos_calc_monit_tag_dly_swb_s2 = '0') and (pos_calc_monit_tag_dly_swb_s1 = '1')) then
        pos_calc_monit_tag_dly_o <= pos_calc_monit_tag_dly_int;
      end if;
    end if;
  end process;


  -- MONIT Desynchronization Counter Reset
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit_tag_desync_cnt_rst_o <= '0';
      pos_calc_monit_tag_desync_cnt_rst_sync0 <= '0';
      pos_calc_monit_tag_desync_cnt_rst_sync1 <= '0';
      pos_calc_monit_tag_desync_cnt_rst_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit_tag_desync_cnt_rst_sync0 <= pos_calc_monit_tag_desync_cnt_rst_int;
      pos_calc_monit_tag_desync_cnt_rst_sync1 <= pos_calc_monit_tag_desync_cnt_rst_sync0;
      pos_calc_monit_tag_desync_cnt_rst_sync2 <= pos_calc_monit_tag_desync_cnt_rst_sync1;
      pos_calc_monit_tag_desync_cnt_rst_o <= pos_calc_monit_tag_desync_cnt_rst_sync2 and (not pos_calc_monit_tag_desync_cnt_rst_sync1);
    end if;
  end process;


  -- MONIT Desynchronization Counter
  -- asynchronous std_logic_vector register : MONIT Desynchronization Counter (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit_tag_desync_cnt_lwb_s0 <= '0';
      pos_calc_monit_tag_desync_cnt_lwb_s1 <= '0';
      pos_calc_monit_tag_desync_cnt_lwb_s2 <= '0';
      pos_calc_monit_tag_desync_cnt_int <= "00000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit_tag_desync_cnt_lwb_s0 <= pos_calc_monit_tag_desync_cnt_lwb;
      pos_calc_monit_tag_desync_cnt_lwb_s1 <= pos_calc_monit_tag_desync_cnt_lwb_s0;
      pos_calc_monit_tag_desync_cnt_lwb_s2 <= pos_calc_monit_tag_desync_cnt_lwb_s1;
      if ((pos_calc_monit_tag_desync_cnt_lwb_s1 = '1') and (pos_calc_monit_tag_desync_cnt_lwb_s2 = '0')) then
        pos_calc_monit_tag_desync_cnt_int <= pos_calc_monit_tag_desync_cnt_i;
      end if;
    end if;
  end process;


  -- MONIT Masking Enable
  -- synchronizer chain for field : MONIT Masking Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit_data_mask_ctl_en_o <= '0';
      pos_calc_monit_data_mask_ctl_en_sync0 <= '0';
      pos_calc_monit_data_mask_ctl_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit_data_mask_ctl_en_sync0 <= pos_calc_monit_data_mask_ctl_en_int;
      pos_calc_monit_data_mask_ctl_en_sync1 <= pos_calc_monit_data_mask_ctl_en_sync0;
      pos_calc_monit_data_mask_ctl_en_o <= pos_calc_monit_data_mask_ctl_en_sync1;
    end if;
  end process;


  -- MONIT Beginning Data Masking Samples
  -- asynchronous std_logic_vector register : MONIT Beginning Data Masking Samples (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit_data_mask_samples_beg_swb_s0 <= '0';
      pos_calc_monit_data_mask_samples_beg_swb_s1 <= '0';
      pos_calc_monit_data_mask_samples_beg_swb_s2 <= '0';
      pos_calc_monit_data_mask_samples_beg_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit_data_mask_samples_beg_swb_s0 <= pos_calc_monit_data_mask_samples_beg_swb;
      pos_calc_monit_data_mask_samples_beg_swb_s1 <= pos_calc_monit_data_mask_samples_beg_swb_s0;
      pos_calc_monit_data_mask_samples_beg_swb_s2 <= pos_calc_monit_data_mask_samples_beg_swb_s1;
      if ((pos_calc_monit_data_mask_samples_beg_swb_s2 = '0') and (pos_calc_monit_data_mask_samples_beg_swb_s1 = '1')) then
        pos_calc_monit_data_mask_samples_beg_o <= pos_calc_monit_data_mask_samples_beg_int;
      end if;
    end if;
  end process;


  -- MONIT Beginning Data Masking Samples
  -- asynchronous std_logic_vector register : MONIT Beginning Data Masking Samples (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_monit_data_mask_samples_end_swb_s0 <= '0';
      pos_calc_monit_data_mask_samples_end_swb_s1 <= '0';
      pos_calc_monit_data_mask_samples_end_swb_s2 <= '0';
      pos_calc_monit_data_mask_samples_end_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_monit_data_mask_samples_end_swb_s0 <= pos_calc_monit_data_mask_samples_end_swb;
      pos_calc_monit_data_mask_samples_end_swb_s1 <= pos_calc_monit_data_mask_samples_end_swb_s0;
      pos_calc_monit_data_mask_samples_end_swb_s2 <= pos_calc_monit_data_mask_samples_end_swb_s1;
      if ((pos_calc_monit_data_mask_samples_end_swb_s2 = '0') and (pos_calc_monit_data_mask_samples_end_swb_s1 = '1')) then
        pos_calc_monit_data_mask_samples_end_o <= pos_calc_monit_data_mask_samples_end_int;
      end if;
    end if;
  end process;


  -- BPM X position offset
  -- asynchronous std_logic_vector register : BPM X position offset (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_offset_x_swb_s0 <= '0';
      pos_calc_offset_x_swb_s1 <= '0';
      pos_calc_offset_x_swb_s2 <= '0';
      pos_calc_offset_x_o <= "00000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_offset_x_swb_s0 <= pos_calc_offset_x_swb;
      pos_calc_offset_x_swb_s1 <= pos_calc_offset_x_swb_s0;
      pos_calc_offset_x_swb_s2 <= pos_calc_offset_x_swb_s1;
      if ((pos_calc_offset_x_swb_s2 = '0') and (pos_calc_offset_x_swb_s1 = '1')) then
        pos_calc_offset_x_o <= pos_calc_offset_x_int;
      end if;
    end if;
  end process;


  -- BPM Y position offset
  -- asynchronous std_logic_vector register : BPM Y position offset (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_offset_y_swb_s0 <= '0';
      pos_calc_offset_y_swb_s1 <= '0';
      pos_calc_offset_y_swb_s2 <= '0';
      pos_calc_offset_y_o <= "00000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_offset_y_swb_s0 <= pos_calc_offset_y_swb;
      pos_calc_offset_y_swb_s1 <= pos_calc_offset_y_swb_s0;
      pos_calc_offset_y_swb_s2 <= pos_calc_offset_y_swb_s1;
      if ((pos_calc_offset_y_swb_s2 = '0') and (pos_calc_offset_y_swb_s1 = '1')) then
        pos_calc_offset_y_o <= pos_calc_offset_y_int;
      end if;
    end if;
  end process;


  -- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring' data output register 0
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ampfifo_monit_rdreq_int_d0 <= '0';
    elsif rising_edge(clk_sys_i) then
      pos_calc_ampfifo_monit_rdreq_int_d0 <= pos_calc_ampfifo_monit_rdreq_int;
    end if;
  end process;


  -- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring' data output register 1
  -- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring' data output register 2
  -- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring' data output register 3
  -- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring' data output register 0
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_posfifo_monit_rdreq_int_d0 <= '0';
    elsif rising_edge(clk_sys_i) then
      pos_calc_posfifo_monit_rdreq_int_d0 <= pos_calc_posfifo_monit_rdreq_int;
    end if;
  end process;


  -- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring' data output register 1
  -- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring' data output register 2
  -- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring' data output register 3
  -- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring 1' data output register 0
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ampfifo_monit1_rdreq_int_d0 <= '0';
    elsif rising_edge(clk_sys_i) then
      pos_calc_ampfifo_monit1_rdreq_int_d0 <= pos_calc_ampfifo_monit1_rdreq_int;
    end if;
  end process;


  -- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring 1' data output register 1
  -- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring 1' data output register 2
  -- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring 1' data output register 3
  -- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring 1' data output register 0
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_posfifo_monit1_rdreq_int_d0 <= '0';
    elsif rising_edge(clk_sys_i) then
      pos_calc_posfifo_monit1_rdreq_int_d0 <= pos_calc_posfifo_monit1_rdreq_int;
    end if;
  end process;


  -- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring 1' data output register 1
  -- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring 1' data output register 2
  -- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring 1' data output register 3
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
  -- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;

---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for BPM Orbit Interlock Interface Registers
---------------------------------------------------------------------------------------
-- File           : wb_orbit_intlk_regs_pkg.vhd
-- Author         : auto-generated by wbgen2 from wb_orbit_intlk_regs.wb
-- Created        : Tue Sep 24 11:12:27 2024
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wb_orbit_intlk_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package orbit_intlk_wbgen2_pkg is
  
  
  -- Input registers (user design -> WB slave)
  
  type t_orbit_intlk_in_registers is record
    ctrl_reserved_i                          : std_logic_vector(23 downto 0);
    sts_trans_bigger_x_i                     : std_logic;
    sts_trans_bigger_y_i                     : std_logic;
    sts_trans_bigger_ltc_x_i                 : std_logic;
    sts_trans_bigger_ltc_y_i                 : std_logic;
    sts_trans_bigger_any_i                   : std_logic;
    sts_trans_bigger_i                       : std_logic;
    sts_trans_bigger_ltc_i                   : std_logic;
    sts_ang_bigger_x_i                       : std_logic;
    sts_ang_bigger_y_i                       : std_logic;
    sts_ang_bigger_ltc_x_i                   : std_logic;
    sts_ang_bigger_ltc_y_i                   : std_logic;
    sts_ang_bigger_any_i                     : std_logic;
    sts_ang_bigger_i                         : std_logic;
    sts_ang_bigger_ltc_i                     : std_logic;
    sts_intlk_i                              : std_logic;
    sts_intlk_ltc_i                          : std_logic;
    sts_trans_smaller_x_i                    : std_logic;
    sts_trans_smaller_y_i                    : std_logic;
    sts_trans_smaller_ltc_x_i                : std_logic;
    sts_trans_smaller_ltc_y_i                : std_logic;
    sts_trans_smaller_any_i                  : std_logic;
    sts_trans_smaller_i                      : std_logic;
    sts_trans_smaller_ltc_i                  : std_logic;
    sts_ang_smaller_x_i                      : std_logic;
    sts_ang_smaller_y_i                      : std_logic;
    sts_ang_smaller_ltc_x_i                  : std_logic;
    sts_ang_smaller_ltc_y_i                  : std_logic;
    sts_ang_smaller_any_i                    : std_logic;
    sts_ang_smaller_i                        : std_logic;
    sts_ang_smaller_ltc_i                    : std_logic;
    sts_min_sum_bigger_i                     : std_logic;
    sts_reserved_i                           : std_logic;
    trans_x_diff_i                           : std_logic_vector(31 downto 0);
    trans_y_diff_i                           : std_logic_vector(31 downto 0);
    ang_x_diff_i                             : std_logic_vector(31 downto 0);
    ang_y_diff_i                             : std_logic_vector(31 downto 0);
  end record;
  
  constant c_orbit_intlk_in_registers_init_value: t_orbit_intlk_in_registers := (
    ctrl_reserved_i => (others => '0'),
    sts_trans_bigger_x_i => '0',
    sts_trans_bigger_y_i => '0',
    sts_trans_bigger_ltc_x_i => '0',
    sts_trans_bigger_ltc_y_i => '0',
    sts_trans_bigger_any_i => '0',
    sts_trans_bigger_i => '0',
    sts_trans_bigger_ltc_i => '0',
    sts_ang_bigger_x_i => '0',
    sts_ang_bigger_y_i => '0',
    sts_ang_bigger_ltc_x_i => '0',
    sts_ang_bigger_ltc_y_i => '0',
    sts_ang_bigger_any_i => '0',
    sts_ang_bigger_i => '0',
    sts_ang_bigger_ltc_i => '0',
    sts_intlk_i => '0',
    sts_intlk_ltc_i => '0',
    sts_trans_smaller_x_i => '0',
    sts_trans_smaller_y_i => '0',
    sts_trans_smaller_ltc_x_i => '0',
    sts_trans_smaller_ltc_y_i => '0',
    sts_trans_smaller_any_i => '0',
    sts_trans_smaller_i => '0',
    sts_trans_smaller_ltc_i => '0',
    sts_ang_smaller_x_i => '0',
    sts_ang_smaller_y_i => '0',
    sts_ang_smaller_ltc_x_i => '0',
    sts_ang_smaller_ltc_y_i => '0',
    sts_ang_smaller_any_i => '0',
    sts_ang_smaller_i => '0',
    sts_ang_smaller_ltc_i => '0',
    sts_min_sum_bigger_i => '0',
    sts_reserved_i => '0',
    trans_x_diff_i => (others => '0'),
    trans_y_diff_i => (others => '0'),
    ang_x_diff_i => (others => '0'),
    ang_y_diff_i => (others => '0')
  );
  
  -- Output registers (WB slave -> user design)
  
  type t_orbit_intlk_out_registers is record
    ctrl_en_o                                : std_logic;
    ctrl_clr_o                               : std_logic;
    ctrl_min_sum_en_o                        : std_logic;
    ctrl_trans_en_o                          : std_logic;
    ctrl_trans_clr_o                         : std_logic;
    ctrl_ang_en_o                            : std_logic;
    ctrl_ang_clr_o                           : std_logic;
    min_sum_o                                : std_logic_vector(31 downto 0);
    trans_max_x_o                            : std_logic_vector(31 downto 0);
    trans_max_y_o                            : std_logic_vector(31 downto 0);
    ang_max_x_o                              : std_logic_vector(31 downto 0);
    ang_max_y_o                              : std_logic_vector(31 downto 0);
    trans_min_x_o                            : std_logic_vector(31 downto 0);
    trans_min_y_o                            : std_logic_vector(31 downto 0);
    ang_min_x_o                              : std_logic_vector(31 downto 0);
    ang_min_y_o                              : std_logic_vector(31 downto 0);
  end record;
  
  constant c_orbit_intlk_out_registers_init_value: t_orbit_intlk_out_registers := (
    ctrl_en_o => '0',
    ctrl_clr_o => '0',
    ctrl_min_sum_en_o => '0',
    ctrl_trans_en_o => '0',
    ctrl_trans_clr_o => '0',
    ctrl_ang_en_o => '0',
    ctrl_ang_clr_o => '0',
    min_sum_o => (others => '0'),
    trans_max_x_o => (others => '0'),
    trans_max_y_o => (others => '0'),
    ang_max_x_o => (others => '0'),
    ang_max_y_o => (others => '0'),
    trans_min_x_o => (others => '0'),
    trans_min_y_o => (others => '0'),
    ang_min_x_o => (others => '0'),
    ang_min_y_o => (others => '0')
  );
  
  function "or" (left, right: t_orbit_intlk_in_registers) return t_orbit_intlk_in_registers;
  function f_x_to_zero (x:std_logic) return std_logic;
  function f_x_to_zero (x:std_logic_vector) return std_logic_vector;
  
  component wb_orbit_intlk_regs is
    port (
      rst_n_i                                  : in     std_logic;
      clk_sys_i                                : in     std_logic;
      wb_adr_i                                 : in     std_logic_vector(3 downto 0);
      wb_dat_i                                 : in     std_logic_vector(31 downto 0);
      wb_dat_o                                 : out    std_logic_vector(31 downto 0);
      wb_cyc_i                                 : in     std_logic;
      wb_sel_i                                 : in     std_logic_vector(3 downto 0);
      wb_stb_i                                 : in     std_logic;
      wb_we_i                                  : in     std_logic;
      wb_ack_o                                 : out    std_logic;
      wb_err_o                                 : out    std_logic;
      wb_rty_o                                 : out    std_logic;
      wb_stall_o                               : out    std_logic;
      fs_clk_i                                 : in     std_logic;
      regs_i                                   : in     t_orbit_intlk_in_registers;
      regs_o                                   : out    t_orbit_intlk_out_registers
    );
  end component;
  
end package;

package body orbit_intlk_wbgen2_pkg is
  function f_x_to_zero (x:std_logic) return std_logic is
  begin
    if x = '1' then
      return '1';
    else
      return '0';
    end if;
  end function;
  
  function f_x_to_zero (x:std_logic_vector) return std_logic_vector is
    variable tmp: std_logic_vector(x'length-1 downto 0);
  begin
    for i in 0 to x'length-1 loop
      if(x(i) = '1') then
        tmp(i):= '1';
      else
        tmp(i):= '0';
      end if; 
    end loop; 
    return tmp;
  end function;
  
  function "or" (left, right: t_orbit_intlk_in_registers) return t_orbit_intlk_in_registers is
    variable tmp: t_orbit_intlk_in_registers;
  begin
    tmp.ctrl_reserved_i := f_x_to_zero(left.ctrl_reserved_i) or f_x_to_zero(right.ctrl_reserved_i);
    tmp.sts_trans_bigger_x_i := f_x_to_zero(left.sts_trans_bigger_x_i) or f_x_to_zero(right.sts_trans_bigger_x_i);
    tmp.sts_trans_bigger_y_i := f_x_to_zero(left.sts_trans_bigger_y_i) or f_x_to_zero(right.sts_trans_bigger_y_i);
    tmp.sts_trans_bigger_ltc_x_i := f_x_to_zero(left.sts_trans_bigger_ltc_x_i) or f_x_to_zero(right.sts_trans_bigger_ltc_x_i);
    tmp.sts_trans_bigger_ltc_y_i := f_x_to_zero(left.sts_trans_bigger_ltc_y_i) or f_x_to_zero(right.sts_trans_bigger_ltc_y_i);
    tmp.sts_trans_bigger_any_i := f_x_to_zero(left.sts_trans_bigger_any_i) or f_x_to_zero(right.sts_trans_bigger_any_i);
    tmp.sts_trans_bigger_i := f_x_to_zero(left.sts_trans_bigger_i) or f_x_to_zero(right.sts_trans_bigger_i);
    tmp.sts_trans_bigger_ltc_i := f_x_to_zero(left.sts_trans_bigger_ltc_i) or f_x_to_zero(right.sts_trans_bigger_ltc_i);
    tmp.sts_ang_bigger_x_i := f_x_to_zero(left.sts_ang_bigger_x_i) or f_x_to_zero(right.sts_ang_bigger_x_i);
    tmp.sts_ang_bigger_y_i := f_x_to_zero(left.sts_ang_bigger_y_i) or f_x_to_zero(right.sts_ang_bigger_y_i);
    tmp.sts_ang_bigger_ltc_x_i := f_x_to_zero(left.sts_ang_bigger_ltc_x_i) or f_x_to_zero(right.sts_ang_bigger_ltc_x_i);
    tmp.sts_ang_bigger_ltc_y_i := f_x_to_zero(left.sts_ang_bigger_ltc_y_i) or f_x_to_zero(right.sts_ang_bigger_ltc_y_i);
    tmp.sts_ang_bigger_any_i := f_x_to_zero(left.sts_ang_bigger_any_i) or f_x_to_zero(right.sts_ang_bigger_any_i);
    tmp.sts_ang_bigger_i := f_x_to_zero(left.sts_ang_bigger_i) or f_x_to_zero(right.sts_ang_bigger_i);
    tmp.sts_ang_bigger_ltc_i := f_x_to_zero(left.sts_ang_bigger_ltc_i) or f_x_to_zero(right.sts_ang_bigger_ltc_i);
    tmp.sts_intlk_i := f_x_to_zero(left.sts_intlk_i) or f_x_to_zero(right.sts_intlk_i);
    tmp.sts_intlk_ltc_i := f_x_to_zero(left.sts_intlk_ltc_i) or f_x_to_zero(right.sts_intlk_ltc_i);
    tmp.sts_trans_smaller_x_i := f_x_to_zero(left.sts_trans_smaller_x_i) or f_x_to_zero(right.sts_trans_smaller_x_i);
    tmp.sts_trans_smaller_y_i := f_x_to_zero(left.sts_trans_smaller_y_i) or f_x_to_zero(right.sts_trans_smaller_y_i);
    tmp.sts_trans_smaller_ltc_x_i := f_x_to_zero(left.sts_trans_smaller_ltc_x_i) or f_x_to_zero(right.sts_trans_smaller_ltc_x_i);
    tmp.sts_trans_smaller_ltc_y_i := f_x_to_zero(left.sts_trans_smaller_ltc_y_i) or f_x_to_zero(right.sts_trans_smaller_ltc_y_i);
    tmp.sts_trans_smaller_any_i := f_x_to_zero(left.sts_trans_smaller_any_i) or f_x_to_zero(right.sts_trans_smaller_any_i);
    tmp.sts_trans_smaller_i := f_x_to_zero(left.sts_trans_smaller_i) or f_x_to_zero(right.sts_trans_smaller_i);
    tmp.sts_trans_smaller_ltc_i := f_x_to_zero(left.sts_trans_smaller_ltc_i) or f_x_to_zero(right.sts_trans_smaller_ltc_i);
    tmp.sts_ang_smaller_x_i := f_x_to_zero(left.sts_ang_smaller_x_i) or f_x_to_zero(right.sts_ang_smaller_x_i);
    tmp.sts_ang_smaller_y_i := f_x_to_zero(left.sts_ang_smaller_y_i) or f_x_to_zero(right.sts_ang_smaller_y_i);
    tmp.sts_ang_smaller_ltc_x_i := f_x_to_zero(left.sts_ang_smaller_ltc_x_i) or f_x_to_zero(right.sts_ang_smaller_ltc_x_i);
    tmp.sts_ang_smaller_ltc_y_i := f_x_to_zero(left.sts_ang_smaller_ltc_y_i) or f_x_to_zero(right.sts_ang_smaller_ltc_y_i);
    tmp.sts_ang_smaller_any_i := f_x_to_zero(left.sts_ang_smaller_any_i) or f_x_to_zero(right.sts_ang_smaller_any_i);
    tmp.sts_ang_smaller_i := f_x_to_zero(left.sts_ang_smaller_i) or f_x_to_zero(right.sts_ang_smaller_i);
    tmp.sts_ang_smaller_ltc_i := f_x_to_zero(left.sts_ang_smaller_ltc_i) or f_x_to_zero(right.sts_ang_smaller_ltc_i);
    tmp.sts_min_sum_bigger_i := f_x_to_zero(left.sts_min_sum_bigger_i) or f_x_to_zero(right.sts_min_sum_bigger_i);
    tmp.sts_reserved_i := f_x_to_zero(left.sts_reserved_i) or f_x_to_zero(right.sts_reserved_i);
    tmp.trans_x_diff_i := f_x_to_zero(left.trans_x_diff_i) or f_x_to_zero(right.trans_x_diff_i);
    tmp.trans_y_diff_i := f_x_to_zero(left.trans_y_diff_i) or f_x_to_zero(right.trans_y_diff_i);
    tmp.ang_x_diff_i := f_x_to_zero(left.ang_x_diff_i) or f_x_to_zero(right.ang_x_diff_i);
    tmp.ang_y_diff_i := f_x_to_zero(left.ang_y_diff_i) or f_x_to_zero(right.ang_y_diff_i);
    return tmp;
  end function;

end package body;

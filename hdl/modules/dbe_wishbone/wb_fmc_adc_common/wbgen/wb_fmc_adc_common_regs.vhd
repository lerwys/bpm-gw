---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for FMC ADC Common registers
---------------------------------------------------------------------------------------
-- File           : wb_fmc_adc_common_regs.vhd
-- Author         : auto-generated by wbgen2 from wb_fmc_adc_common_regs.wb
-- Created        : Fri Jul 21 13:54:07 2017
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wb_fmc_adc_common_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.wb_fmc_adc_common_csr_wbgen2_pkg.all;


entity wb_fmc_adc_common_csr is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(1 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    regs_i                                   : in     t_wb_fmc_adc_common_csr_in_registers;
    regs_o                                   : out    t_wb_fmc_adc_common_csr_out_registers
  );
end wb_fmc_adc_common_csr;

architecture syn of wb_fmc_adc_common_csr is

signal wb_fmc_adc_common_csr_trigger_dir_int    : std_logic      ;
signal wb_fmc_adc_common_csr_trigger_term_int   : std_logic      ;
signal wb_fmc_adc_common_csr_trigger_trig_val_int : std_logic      ;
signal wb_fmc_adc_common_csr_monitor_test_data_en_int : std_logic      ;
signal wb_fmc_adc_common_csr_monitor_led1_int   : std_logic      ;
signal wb_fmc_adc_common_csr_monitor_led2_int   : std_logic      ;
signal wb_fmc_adc_common_csr_monitor_led3_int   : std_logic      ;
signal wb_fmc_adc_common_csr_monitor_mmcm_rst_int : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(1 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      wb_fmc_adc_common_csr_trigger_dir_int <= '0';
      wb_fmc_adc_common_csr_trigger_term_int <= '0';
      wb_fmc_adc_common_csr_trigger_trig_val_int <= '0';
      wb_fmc_adc_common_csr_monitor_test_data_en_int <= '0';
      wb_fmc_adc_common_csr_monitor_led1_int <= '0';
      wb_fmc_adc_common_csr_monitor_led2_int <= '0';
      wb_fmc_adc_common_csr_monitor_led3_int <= '0';
      wb_fmc_adc_common_csr_monitor_mmcm_rst_int <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(1 downto 0) is
          when "00" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(0) <= regs_i.fmc_status_mmcm_locked_i;
            rddata_reg(1) <= regs_i.fmc_status_pwr_good_i;
            rddata_reg(2) <= regs_i.fmc_status_prst_i;
            rddata_reg(30 downto 3) <= regs_i.fmc_status_reserved_i;
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01" => 
            if (wb_we_i = '1') then
              wb_fmc_adc_common_csr_trigger_dir_int <= wrdata_reg(0);
              wb_fmc_adc_common_csr_trigger_term_int <= wrdata_reg(1);
              wb_fmc_adc_common_csr_trigger_trig_val_int <= wrdata_reg(2);
            end if;
            rddata_reg(0) <= wb_fmc_adc_common_csr_trigger_dir_int;
            rddata_reg(1) <= wb_fmc_adc_common_csr_trigger_term_int;
            rddata_reg(2) <= wb_fmc_adc_common_csr_trigger_trig_val_int;
            rddata_reg(31 downto 3) <= regs_i.trigger_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10" => 
            if (wb_we_i = '1') then
              wb_fmc_adc_common_csr_monitor_test_data_en_int <= wrdata_reg(0);
              wb_fmc_adc_common_csr_monitor_led1_int <= wrdata_reg(1);
              wb_fmc_adc_common_csr_monitor_led2_int <= wrdata_reg(2);
              wb_fmc_adc_common_csr_monitor_led3_int <= wrdata_reg(3);
              wb_fmc_adc_common_csr_monitor_mmcm_rst_int <= wrdata_reg(4);
            end if;
            rddata_reg(0) <= wb_fmc_adc_common_csr_monitor_test_data_en_int;
            rddata_reg(1) <= wb_fmc_adc_common_csr_monitor_led1_int;
            rddata_reg(2) <= wb_fmc_adc_common_csr_monitor_led2_int;
            rddata_reg(3) <= wb_fmc_adc_common_csr_monitor_led3_int;
            rddata_reg(4) <= wb_fmc_adc_common_csr_monitor_mmcm_rst_int;
            rddata_reg(31 downto 5) <= regs_i.monitor_reserved_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- MMCM locked status
-- FMC power good status
-- FMC board present status
-- Reserved
-- Direction
  regs_o.trigger_dir_o <= wb_fmc_adc_common_csr_trigger_dir_int;
-- Termination Control
  regs_o.trigger_term_o <= wb_fmc_adc_common_csr_trigger_term_int;
-- Trigger Value
  regs_o.trigger_trig_val_o <= wb_fmc_adc_common_csr_trigger_trig_val_int;
-- Reserved
-- Enable test data
  regs_o.monitor_test_data_en_o <= wb_fmc_adc_common_csr_monitor_test_data_en_int;
-- Led 1
  regs_o.monitor_led1_o <= wb_fmc_adc_common_csr_monitor_led1_int;
-- Led 2
  regs_o.monitor_led2_o <= wb_fmc_adc_common_csr_monitor_led2_int;
-- Led 3
  regs_o.monitor_led3_o <= wb_fmc_adc_common_csr_monitor_led3_int;
-- MMCM reset
  regs_o.monitor_mmcm_rst_o <= wb_fmc_adc_common_csr_monitor_mmcm_rst_int;
-- Reserved
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
